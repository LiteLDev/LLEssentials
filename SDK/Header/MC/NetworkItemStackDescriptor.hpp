// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here
#include "ItemDescriptor.hpp"
#include "ItemStackNetIdVariant.hpp"
<<<<<<< HEAD
=======

>>>>>>> 51d0529ff191cb743d7dd9047e8ce5e7edba226d
#undef BEFORE_EXTRA

class NetworkItemStackDescriptor {
public:
    ItemDescriptor descriptor;
    int unk72;//72
    int unk76;
    ItemStackNetIdVariant netID;//80
    int unk88;
    void* unk96[4];

#define AFTER_EXTRA
// Add Member There
public:
    ItemDescriptor mDescriptor;
    unsigned short mCount; //72
private:
    int unk76;
public:
    bool mHasNetID;                   //80
    ItemStackNetIdVariant mNetworkID; //84
    unsigned int mBlockRuntimeID;     //92
    std::string mIdentifier;

#undef AFTER_EXTRA

#ifndef DISABLE_CONSTRUCTOR_PREVENTION_NETWORKITEMSTACKDESCRIPTOR
public:
    class NetworkItemStackDescriptor& operator=(class NetworkItemStackDescriptor const&) = delete;
    NetworkItemStackDescriptor(class NetworkItemStackDescriptor const&) = delete;
    NetworkItemStackDescriptor() = delete;
#endif

public:
    MCAPI NetworkItemStackDescriptor(class NetworkItemStackDescriptor&&);
    MCAPI NetworkItemStackDescriptor(class ItemStack const&);
    MCAPI NetworkItemStackDescriptor(class ItemStackDescriptor const&);
    MCAPI void read(class ReadOnlyBinaryStream&);
    MCAPI void setIncludeNetIds(bool) const;
    MCAPI class TypedServerNetId<struct ItemStackNetIdTag, int, 0> const* tryGetServerNetId() const;
    MCAPI void write(class BinaryStream&) const;
    MCAPI ~NetworkItemStackDescriptor();

protected:

private:

};