// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

class Enchant {

#define AFTER_EXTRA
// Add Member There
public:
enum Slot;
enum Type;

#undef AFTER_EXTRA

#ifndef DISABLE_CONSTRUCTOR_PREVENTION_ENCHANT
public:
    class Enchant& operator=(class Enchant const&) = delete;
    Enchant(class Enchant const&) = delete;
    Enchant() = delete;
#endif

public:
    /*0*/ virtual ~Enchant();
    /*1*/ virtual bool isCompatibleWith(enum Enchant::Type) const;
    /*2*/ virtual int getMinCost(int) const;
    /*3*/ virtual int getMaxCost(int) const;
    /*4*/ virtual void __unk_vfn_4();
    /*5*/ virtual int getMaxLevel() const;
    /*6*/ virtual int getDamageProtection(int, class ActorDamageSource const&) const;
    /*7*/ virtual float getDamageBonus(int, class Actor const&) const;
    /*8*/ virtual void doPostAttack(class Actor&, class Actor&, int) const;
    /*9*/ virtual void doPostHurt(class ItemInstance&, class Actor&, class Actor&, int) const;
    /*10*/ virtual void __unk_vfn_10();
    /*11*/ virtual void __unk_vfn_11();
    /*12*/ virtual void __unk_vfn_12();
    /*13*/ virtual void __unk_vfn_13();
    /*14*/ virtual bool _isValidEnchantmentTypeForCategory(enum Enchant::Type) const;
    /*
    inline bool isProtectionEnchant() const{
        bool (Enchant::*rv)() const;
        *((void**)&rv) = dlsym("?isProtectionEnchant@Enchant@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline bool isTreasureOnly() const{
        bool (Enchant::*rv)() const;
        *((void**)&rv) = dlsym("?isTreasureOnly@Enchant@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline bool isMeleeDamageEnchant() const{
        bool (Enchant::*rv)() const;
        *((void**)&rv) = dlsym("?isMeleeDamageEnchant@Enchant@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline bool isDiscoverable() const{
        bool (Enchant::*rv)() const;
        *((void**)&rv) = dlsym("?isDiscoverable@Enchant@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline int getMinLevel() const{
        int (Enchant::*rv)() const;
        *((void**)&rv) = dlsym("?getMinLevel@Enchant@@UEBAHXZ");
        return (this->*rv)();
    }
    inline  ~Enchant(){
         (Enchant::*rv)();
        *((void**)&rv) = dlsym("??1Enchant@@UEAA@XZ");
        return (this->*rv)();
    }
    */
    MCAPI Enchant(enum Enchant::Type, enum Enchant::Frequency, class gsl::basic_string_span<char const, -1>, class gsl::basic_string_span<char const, -1>, int, int, bool);
    MCAPI std::string getDescriptionId() const;
    MCAPI class HashedString const& getStringId() const;
    MCAPI bool isAvailable() const;
    MCAPI bool isDisabled() const;
    MCAPI static void initEnchants();
    MCAPI static std::vector<std::unique_ptr<class Enchant>> mEnchants;
    MCAPI static void shutdownEnchants();

protected:

private:

};