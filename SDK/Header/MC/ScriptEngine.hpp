// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "ScriptApi.hpp"
#include "Json.hpp"
#include "Core.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

class ScriptEngine {

#define AFTER_EXTRA
// Add Member There
public:
struct ScriptQueueData {
    ScriptQueueData() = delete;
    ScriptQueueData(ScriptQueueData const&) = delete;
    ScriptQueueData(ScriptQueueData const&&) = delete;
};

#undef AFTER_EXTRA

#ifndef DISABLE_CONSTRUCTOR_PREVENTION_SCRIPTENGINE
public:
    class ScriptEngine& operator=(class ScriptEngine const&) = delete;
    ScriptEngine(class ScriptEngine const&) = delete;
    ScriptEngine() = delete;
#endif

public:
    /*
    inline bool _registerSystemObjects(class ScriptApi::ScriptObjectHandle const& a0){
        bool (ScriptEngine::*rv)(class ScriptApi::ScriptObjectHandle const&);
        *((void**)&rv) = dlsym("?_registerSystemObjects@ScriptEngine@@MEAA_NAEBVScriptObjectHandle@ScriptApi@@@Z");
        return (this->*rv)(std::forward<class ScriptApi::ScriptObjectHandle const&>(a0));
    }
    inline  ~ScriptEngine(){
         (ScriptEngine::*rv)();
        *((void**)&rv) = dlsym("??1ScriptEngine@@UEAA@XZ");
        return (this->*rv)();
    }
    inline bool initialize(){
        bool (ScriptEngine::*rv)();
        *((void**)&rv) = dlsym("?initialize@ScriptEngine@@UEAA_NXZ");
        return (this->*rv)();
    }
    inline void makeErrorResultObject(class ScriptApi::ScriptObjectHandle& a0){
        void (ScriptEngine::*rv)(class ScriptApi::ScriptObjectHandle&);
        *((void**)&rv) = dlsym("?makeErrorResultObject@ScriptEngine@@UEAAXAEAVScriptObjectHandle@ScriptApi@@@Z");
        return (this->*rv)(std::forward<class ScriptApi::ScriptObjectHandle&>(a0));
    }
    inline bool onErrorReceived(std::string const& a0){
        bool (ScriptEngine::*rv)(std::string const&);
        *((void**)&rv) = dlsym("?onErrorReceived@ScriptEngine@@UEAA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z");
        return (this->*rv)(std::forward<std::string const&>(a0));
    }
    inline bool onInfoReceived(std::string const& a0){
        bool (ScriptEngine::*rv)(std::string const&);
        *((void**)&rv) = dlsym("?onInfoReceived@ScriptEngine@@UEAA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z");
        return (this->*rv)(std::forward<std::string const&>(a0));
    }
    inline bool onLogReceived(std::string const& a0){
        bool (ScriptEngine::*rv)(std::string const&);
        *((void**)&rv) = dlsym("?onLogReceived@ScriptEngine@@UEAA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z");
        return (this->*rv)(std::forward<std::string const&>(a0));
    }
    inline bool onWarnReceived(std::string const& a0){
        bool (ScriptEngine::*rv)(std::string const&);
        *((void**)&rv) = dlsym("?onWarnReceived@ScriptEngine@@UEAA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z");
        return (this->*rv)(std::forward<std::string const&>(a0));
    }
    inline void processAddFilterToQueryCallback(std::vector<class ScriptApi::ScriptObjectHandle> const& a0, class ScriptApi::ScriptObjectHandle& a1){
        void (ScriptEngine::*rv)(std::vector<class ScriptApi::ScriptObjectHandle> const&, class ScriptApi::ScriptObjectHandle&);
        *((void**)&rv) = dlsym("?processAddFilterToQueryCallback@ScriptEngine@@UEAAXAEBV?$vector@VScriptObjectHandle@ScriptApi@@V?$allocator@VScriptObjectHandle@ScriptApi@@@std@@@std@@AEAVScriptObjectHandle@ScriptApi@@@Z");
        return (this->*rv)(std::forward<std::vector<class ScriptApi::ScriptObjectHandle> const&>(a0), std::forward<class ScriptApi::ScriptObjectHandle&>(a1));
    }
    inline void processApplyComponentChangesCallback(std::vector<class ScriptApi::ScriptObjectHandle> const& a0, class ScriptApi::ScriptObjectHandle& a1){
        void (ScriptEngine::*rv)(std::vector<class ScriptApi::ScriptObjectHandle> const&, class ScriptApi::ScriptObjectHandle&);
        *((void**)&rv) = dlsym("?processApplyComponentChangesCallback@ScriptEngine@@UEAAXAEBV?$vector@VScriptObjectHandle@ScriptApi@@V?$allocator@VScriptObjectHandle@ScriptApi@@@std@@@std@@AEAVScriptObjectHandle@ScriptApi@@@Z");
        return (this->*rv)(std::forward<std::vector<class ScriptApi::ScriptObjectHandle> const&>(a0), std::forward<class ScriptApi::ScriptObjectHandle&>(a1));
    }
    inline void processBroadcastEventCallback(std::vector<class ScriptApi::ScriptObjectHandle> const& a0, class ScriptApi::ScriptObjectHandle& a1){
        void (ScriptEngine::*rv)(std::vector<class ScriptApi::ScriptObjectHandle> const&, class ScriptApi::ScriptObjectHandle&);
        *((void**)&rv) = dlsym("?processBroadcastEventCallback@ScriptEngine@@UEAAXAEBV?$vector@VScriptObjectHandle@ScriptApi@@V?$allocator@VScriptObjectHandle@ScriptApi@@@std@@@std@@AEAVScriptObjectHandle@ScriptApi@@@Z");
        return (this->*rv)(std::forward<std::vector<class ScriptApi::ScriptObjectHandle> const&>(a0), std::forward<class ScriptApi::ScriptObjectHandle&>(a1));
    }
    inline void processCreateComponentCallback(std::vector<class ScriptApi::ScriptObjectHandle> const& a0, class ScriptApi::ScriptObjectHandle& a1){
        void (ScriptEngine::*rv)(std::vector<class ScriptApi::ScriptObjectHandle> const&, class ScriptApi::ScriptObjectHandle&);
        *((void**)&rv) = dlsym("?processCreateComponentCallback@ScriptEngine@@UEAAXAEBV?$vector@VScriptObjectHandle@ScriptApi@@V?$allocator@VScriptObjectHandle@ScriptApi@@@std@@@std@@AEAVScriptObjectHandle@ScriptApi@@@Z");
        return (this->*rv)(std::forward<std::vector<class ScriptApi::ScriptObjectHandle> const&>(a0), std::forward<class ScriptApi::ScriptObjectHandle&>(a1));
    }
    inline void processCreateEntityCallback(std::vector<class ScriptApi::ScriptObjectHandle> const& a0, class ScriptApi::ScriptObjectHandle& a1){
        void (ScriptEngine::*rv)(std::vector<class ScriptApi::ScriptObjectHandle> const&, class ScriptApi::ScriptObjectHandle&);
        *((void**)&rv) = dlsym("?processCreateEntityCallback@ScriptEngine@@UEAAXAEBV?$vector@VScriptObjectHandle@ScriptApi@@V?$allocator@VScriptObjectHandle@ScriptApi@@@std@@@std@@AEAVScriptObjectHandle@ScriptApi@@@Z");
        return (this->*rv)(std::forward<std::vector<class ScriptApi::ScriptObjectHandle> const&>(a0), std::forward<class ScriptApi::ScriptObjectHandle&>(a1));
    }
    inline void processCreateEventDataCallback(std::vector<class ScriptApi::ScriptObjectHandle> const& a0, class ScriptApi::ScriptObjectHandle& a1){
        void (ScriptEngine::*rv)(std::vector<class ScriptApi::ScriptObjectHandle> const&, class ScriptApi::ScriptObjectHandle&);
        *((void**)&rv) = dlsym("?processCreateEventDataCallback@ScriptEngine@@UEAAXAEBV?$vector@VScriptObjectHandle@ScriptApi@@V?$allocator@VScriptObjectHandle@ScriptApi@@@std@@@std@@AEAVScriptObjectHandle@ScriptApi@@@Z");
        return (this->*rv)(std::forward<std::vector<class ScriptApi::ScriptObjectHandle> const&>(a0), std::forward<class ScriptApi::ScriptObjectHandle&>(a1));
    }
    inline void processDestroyComponentCallback(std::vector<class ScriptApi::ScriptObjectHandle> const& a0, class ScriptApi::ScriptObjectHandle& a1){
        void (ScriptEngine::*rv)(std::vector<class ScriptApi::ScriptObjectHandle> const&, class ScriptApi::ScriptObjectHandle&);
        *((void**)&rv) = dlsym("?processDestroyComponentCallback@ScriptEngine@@UEAAXAEBV?$vector@VScriptObjectHandle@ScriptApi@@V?$allocator@VScriptObjectHandle@ScriptApi@@@std@@@std@@AEAVScriptObjectHandle@ScriptApi@@@Z");
        return (this->*rv)(std::forward<std::vector<class ScriptApi::ScriptObjectHandle> const&>(a0), std::forward<class ScriptApi::ScriptObjectHandle&>(a1));
    }
    inline void processDestroyEntityCallback(std::vector<class ScriptApi::ScriptObjectHandle> const& a0, class ScriptApi::ScriptObjectHandle& a1){
        void (ScriptEngine::*rv)(std::vector<class ScriptApi::ScriptObjectHandle> const&, class ScriptApi::ScriptObjectHandle&);
        *((void**)&rv) = dlsym("?processDestroyEntityCallback@ScriptEngine@@UEAAXAEBV?$vector@VScriptObjectHandle@ScriptApi@@V?$allocator@VScriptObjectHandle@ScriptApi@@@std@@@std@@AEAVScriptObjectHandle@ScriptApi@@@Z");
        return (this->*rv)(std::forward<std::vector<class ScriptApi::ScriptObjectHandle> const&>(a0), std::forward<class ScriptApi::ScriptObjectHandle&>(a1));
    }
    inline void processErrorCallback(std::vector<class ScriptApi::ScriptObjectHandle> const& a0, class ScriptApi::ScriptObjectHandle& a1){
        void (ScriptEngine::*rv)(std::vector<class ScriptApi::ScriptObjectHandle> const&, class ScriptApi::ScriptObjectHandle&);
        *((void**)&rv) = dlsym("?processErrorCallback@ScriptEngine@@UEAAXAEBV?$vector@VScriptObjectHandle@ScriptApi@@V?$allocator@VScriptObjectHandle@ScriptApi@@@std@@@std@@AEAVScriptObjectHandle@ScriptApi@@@Z");
        return (this->*rv)(std::forward<std::vector<class ScriptApi::ScriptObjectHandle> const&>(a0), std::forward<class ScriptApi::ScriptObjectHandle&>(a1));
    }
    inline void processExecuteCommandCallback(std::vector<class ScriptApi::ScriptObjectHandle> const& a0, class ScriptApi::ScriptObjectHandle& a1){
        void (ScriptEngine::*rv)(std::vector<class ScriptApi::ScriptObjectHandle> const&, class ScriptApi::ScriptObjectHandle&);
        *((void**)&rv) = dlsym("?processExecuteCommandCallback@ScriptEngine@@UEAAXAEBV?$vector@VScriptObjectHandle@ScriptApi@@V?$allocator@VScriptObjectHandle@ScriptApi@@@std@@@std@@AEAVScriptObjectHandle@ScriptApi@@@Z");
        return (this->*rv)(std::forward<std::vector<class ScriptApi::ScriptObjectHandle> const&>(a0), std::forward<class ScriptApi::ScriptObjectHandle&>(a1));
    }
    inline void processGetBlockCallback(std::vector<class ScriptApi::ScriptObjectHandle> const& a0, class ScriptApi::ScriptObjectHandle& a1){
        void (ScriptEngine::*rv)(std::vector<class ScriptApi::ScriptObjectHandle> const&, class ScriptApi::ScriptObjectHandle&);
        *((void**)&rv) = dlsym("?processGetBlockCallback@ScriptEngine@@UEAAXAEBV?$vector@VScriptObjectHandle@ScriptApi@@V?$allocator@VScriptObjectHandle@ScriptApi@@@std@@@std@@AEAVScriptObjectHandle@ScriptApi@@@Z");
        return (this->*rv)(std::forward<std::vector<class ScriptApi::ScriptObjectHandle> const&>(a0), std::forward<class ScriptApi::ScriptObjectHandle&>(a1));
    }
    inline void processGetBlocksCallback(std::vector<class ScriptApi::ScriptObjectHandle> const& a0, class ScriptApi::ScriptObjectHandle& a1){
        void (ScriptEngine::*rv)(std::vector<class ScriptApi::ScriptObjectHandle> const&, class ScriptApi::ScriptObjectHandle&);
        *((void**)&rv) = dlsym("?processGetBlocksCallback@ScriptEngine@@UEAAXAEBV?$vector@VScriptObjectHandle@ScriptApi@@V?$allocator@VScriptObjectHandle@ScriptApi@@@std@@@std@@AEAVScriptObjectHandle@ScriptApi@@@Z");
        return (this->*rv)(std::forward<std::vector<class ScriptApi::ScriptObjectHandle> const&>(a0), std::forward<class ScriptApi::ScriptObjectHandle&>(a1));
    }
    inline void processGetComponentCallback(std::vector<class ScriptApi::ScriptObjectHandle> const& a0, class ScriptApi::ScriptObjectHandle& a1){
        void (ScriptEngine::*rv)(std::vector<class ScriptApi::ScriptObjectHandle> const&, class ScriptApi::ScriptObjectHandle&);
        *((void**)&rv) = dlsym("?processGetComponentCallback@ScriptEngine@@UEAAXAEBV?$vector@VScriptObjectHandle@ScriptApi@@V?$allocator@VScriptObjectHandle@ScriptApi@@@std@@@std@@AEAVScriptObjectHandle@ScriptApi@@@Z");
        return (this->*rv)(std::forward<std::vector<class ScriptApi::ScriptObjectHandle> const&>(a0), std::forward<class ScriptApi::ScriptObjectHandle&>(a1));
    }
    inline void processGetEntitiesFromQueryCallback(std::vector<class ScriptApi::ScriptObjectHandle> const& a0, class ScriptApi::ScriptObjectHandle& a1){
        void (ScriptEngine::*rv)(std::vector<class ScriptApi::ScriptObjectHandle> const&, class ScriptApi::ScriptObjectHandle&);
        *((void**)&rv) = dlsym("?processGetEntitiesFromQueryCallback@ScriptEngine@@UEAAXAEBV?$vector@VScriptObjectHandle@ScriptApi@@V?$allocator@VScriptObjectHandle@ScriptApi@@@std@@@std@@AEAVScriptObjectHandle@ScriptApi@@@Z");
        return (this->*rv)(std::forward<std::vector<class ScriptApi::ScriptObjectHandle> const&>(a0), std::forward<class ScriptApi::ScriptObjectHandle&>(a1));
    }
    inline void processHasComponentCallback(std::vector<class ScriptApi::ScriptObjectHandle> const& a0, class ScriptApi::ScriptObjectHandle& a1){
        void (ScriptEngine::*rv)(std::vector<class ScriptApi::ScriptObjectHandle> const&, class ScriptApi::ScriptObjectHandle&);
        *((void**)&rv) = dlsym("?processHasComponentCallback@ScriptEngine@@UEAAXAEBV?$vector@VScriptObjectHandle@ScriptApi@@V?$allocator@VScriptObjectHandle@ScriptApi@@@std@@@std@@AEAVScriptObjectHandle@ScriptApi@@@Z");
        return (this->*rv)(std::forward<std::vector<class ScriptApi::ScriptObjectHandle> const&>(a0), std::forward<class ScriptApi::ScriptObjectHandle&>(a1));
    }
    inline void processInfoCallback(std::vector<class ScriptApi::ScriptObjectHandle> const& a0, class ScriptApi::ScriptObjectHandle& a1){
        void (ScriptEngine::*rv)(std::vector<class ScriptApi::ScriptObjectHandle> const&, class ScriptApi::ScriptObjectHandle&);
        *((void**)&rv) = dlsym("?processInfoCallback@ScriptEngine@@UEAAXAEBV?$vector@VScriptObjectHandle@ScriptApi@@V?$allocator@VScriptObjectHandle@ScriptApi@@@std@@@std@@AEAVScriptObjectHandle@ScriptApi@@@Z");
        return (this->*rv)(std::forward<std::vector<class ScriptApi::ScriptObjectHandle> const&>(a0), std::forward<class ScriptApi::ScriptObjectHandle&>(a1));
    }
    inline void processIsValidEntityCallback(std::vector<class ScriptApi::ScriptObjectHandle> const& a0, class ScriptApi::ScriptObjectHandle& a1){
        void (ScriptEngine::*rv)(std::vector<class ScriptApi::ScriptObjectHandle> const&, class ScriptApi::ScriptObjectHandle&);
        *((void**)&rv) = dlsym("?processIsValidEntityCallback@ScriptEngine@@UEAAXAEBV?$vector@VScriptObjectHandle@ScriptApi@@V?$allocator@VScriptObjectHandle@ScriptApi@@@std@@@std@@AEAVScriptObjectHandle@ScriptApi@@@Z");
        return (this->*rv)(std::forward<std::vector<class ScriptApi::ScriptObjectHandle> const&>(a0), std::forward<class ScriptApi::ScriptObjectHandle&>(a1));
    }
    inline void processListenForEventCallback(std::vector<class ScriptApi::ScriptObjectHandle> const& a0, class ScriptApi::ScriptObjectHandle& a1){
        void (ScriptEngine::*rv)(std::vector<class ScriptApi::ScriptObjectHandle> const&, class ScriptApi::ScriptObjectHandle&);
        *((void**)&rv) = dlsym("?processListenForEventCallback@ScriptEngine@@UEAAXAEBV?$vector@VScriptObjectHandle@ScriptApi@@V?$allocator@VScriptObjectHandle@ScriptApi@@@std@@@std@@AEAVScriptObjectHandle@ScriptApi@@@Z");
        return (this->*rv)(std::forward<std::vector<class ScriptApi::ScriptObjectHandle> const&>(a0), std::forward<class ScriptApi::ScriptObjectHandle&>(a1));
    }
    inline void processLogCallback(std::vector<class ScriptApi::ScriptObjectHandle> const& a0, class ScriptApi::ScriptObjectHandle& a1){
        void (ScriptEngine::*rv)(std::vector<class ScriptApi::ScriptObjectHandle> const&, class ScriptApi::ScriptObjectHandle&);
        *((void**)&rv) = dlsym("?processLogCallback@ScriptEngine@@UEAAXAEBV?$vector@VScriptObjectHandle@ScriptApi@@V?$allocator@VScriptObjectHandle@ScriptApi@@@std@@@std@@AEAVScriptObjectHandle@ScriptApi@@@Z");
        return (this->*rv)(std::forward<std::vector<class ScriptApi::ScriptObjectHandle> const&>(a0), std::forward<class ScriptApi::ScriptObjectHandle&>(a1));
    }
    inline void processRegisterComponentCallback(std::vector<class ScriptApi::ScriptObjectHandle> const& a0, class ScriptApi::ScriptObjectHandle& a1){
        void (ScriptEngine::*rv)(std::vector<class ScriptApi::ScriptObjectHandle> const&, class ScriptApi::ScriptObjectHandle&);
        *((void**)&rv) = dlsym("?processRegisterComponentCallback@ScriptEngine@@UEAAXAEBV?$vector@VScriptObjectHandle@ScriptApi@@V?$allocator@VScriptObjectHandle@ScriptApi@@@std@@@std@@AEAVScriptObjectHandle@ScriptApi@@@Z");
        return (this->*rv)(std::forward<std::vector<class ScriptApi::ScriptObjectHandle> const&>(a0), std::forward<class ScriptApi::ScriptObjectHandle&>(a1));
    }
    inline void processRegisterEventDataCallback(std::vector<class ScriptApi::ScriptObjectHandle> const& a0, class ScriptApi::ScriptObjectHandle& a1){
        void (ScriptEngine::*rv)(std::vector<class ScriptApi::ScriptObjectHandle> const&, class ScriptApi::ScriptObjectHandle&);
        *((void**)&rv) = dlsym("?processRegisterEventDataCallback@ScriptEngine@@UEAAXAEBV?$vector@VScriptObjectHandle@ScriptApi@@V?$allocator@VScriptObjectHandle@ScriptApi@@@std@@@std@@AEAVScriptObjectHandle@ScriptApi@@@Z");
        return (this->*rv)(std::forward<std::vector<class ScriptApi::ScriptObjectHandle> const&>(a0), std::forward<class ScriptApi::ScriptObjectHandle&>(a1));
    }
    inline void processRegisterQueryCallback(std::vector<class ScriptApi::ScriptObjectHandle> const& a0, class ScriptApi::ScriptObjectHandle& a1){
        void (ScriptEngine::*rv)(std::vector<class ScriptApi::ScriptObjectHandle> const&, class ScriptApi::ScriptObjectHandle&);
        *((void**)&rv) = dlsym("?processRegisterQueryCallback@ScriptEngine@@UEAAXAEBV?$vector@VScriptObjectHandle@ScriptApi@@V?$allocator@VScriptObjectHandle@ScriptApi@@@std@@@std@@AEAVScriptObjectHandle@ScriptApi@@@Z");
        return (this->*rv)(std::forward<std::vector<class ScriptApi::ScriptObjectHandle> const&>(a0), std::forward<class ScriptApi::ScriptObjectHandle&>(a1));
    }
    inline void processRegisterSystemCallback(std::vector<class ScriptApi::ScriptObjectHandle> const& a0, class ScriptApi::ScriptObjectHandle& a1){
        void (ScriptEngine::*rv)(std::vector<class ScriptApi::ScriptObjectHandle> const&, class ScriptApi::ScriptObjectHandle&);
        *((void**)&rv) = dlsym("?processRegisterSystemCallback@ScriptEngine@@UEAAXAEBV?$vector@VScriptObjectHandle@ScriptApi@@V?$allocator@VScriptObjectHandle@ScriptApi@@@std@@@std@@AEAVScriptObjectHandle@ScriptApi@@@Z");
        return (this->*rv)(std::forward<std::vector<class ScriptApi::ScriptObjectHandle> const&>(a0), std::forward<class ScriptApi::ScriptObjectHandle&>(a1));
    }
    inline void processWarningCallback(std::vector<class ScriptApi::ScriptObjectHandle> const& a0, class ScriptApi::ScriptObjectHandle& a1){
        void (ScriptEngine::*rv)(std::vector<class ScriptApi::ScriptObjectHandle> const&, class ScriptApi::ScriptObjectHandle&);
        *((void**)&rv) = dlsym("?processWarningCallback@ScriptEngine@@UEAAXAEBV?$vector@VScriptObjectHandle@ScriptApi@@V?$allocator@VScriptObjectHandle@ScriptApi@@@std@@@std@@AEAVScriptObjectHandle@ScriptApi@@@Z");
        return (this->*rv)(std::forward<std::vector<class ScriptApi::ScriptObjectHandle> const&>(a0), std::forward<class ScriptApi::ScriptObjectHandle&>(a1));
    }
    inline bool shutdown(){
        bool (ScriptEngine::*rv)();
        *((void**)&rv) = dlsym("?shutdown@ScriptEngine@@UEAA_NXZ");
        return (this->*rv)();
    }
    */
    MCAPI ScriptEngine(enum ScriptApi::ApiScriptType);
    MCAPI bool deserializeScriptObjectHandleToJson(class ScriptApi::ScriptObjectHandle const&, class Json::Value&);
    MCAPI bool fireEventToScript(class EventInfo const&, class ScriptApi::ScriptObjectHandle&&);
    MCAPI class ScriptLoggerConfig& getLoggerConfig();
    MCAPI class ScriptEventCoordinator& getScriptEventCoordinator();
    MCAPI bool helpDefinePosition(class BlockPos const&, class ScriptApi::ScriptObjectHandle&);
    MCAPI bool helpDefinePosition(class Vec3 const&, class ScriptApi::ScriptObjectHandle&);
    MCAPI bool helpDefineVec3(class ScriptApi::ScriptObjectHandle&, std::string const&, class Vec3 const&);
    MCAPI std::unique_ptr<class ScriptObjectBinder> helpDeserialize(class ScriptApi::ScriptObjectHandle const&);
    MCAPI bool helpGetPosition(class ScriptApi::ScriptObjectHandle const&, class BlockPos&);
    MCAPI bool helpGetPosition(class ScriptApi::ScriptObjectHandle const&, class Vec3&);
    MCAPI bool helpGetVec3(class ScriptApi::ScriptObjectHandle const&, std::string const&, class Vec3&);
    MCAPI bool helpSetPosition(class BlockPos const&, class ScriptApi::ScriptObjectHandle const&);
    MCAPI bool helpSetPosition(class Vec3 const&, class ScriptApi::ScriptObjectHandle const&);
    MCAPI bool isInitialized() const;
    MCAPI void queueScript(class Core::Path const&, std::string const&, std::string const&, std::string const&);
    MCAPI bool serializeJsonToScriptObjectHandle(class ScriptApi::ScriptObjectHandle&, class Json::Value const&);
    MCAPI void startScriptLoading();
    MCAPI bool update();
    MCAPI static bool isScriptingEnabled();

protected:
    MCAPI struct IdentifierResult _validateObjectIdentifier(std::string const&) const;

private:
    MCAPI void _addScriptToQueue(struct ScriptEngine::ScriptQueueData const&);
    MCAPI bool _getVersionInfo(class ScriptApi::ScriptObjectHandle const&, class ScriptApi::ScriptVersionInfo&);
    MCAPI bool _processSystemInitialize();
    MCAPI bool _processSystemShutdown();
    MCAPI bool _processSystemUpdate();

};