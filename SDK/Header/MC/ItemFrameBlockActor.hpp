// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "BlockActor.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

class ItemFrameBlockActor : public BlockActor {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA

#ifndef DISABLE_CONSTRUCTOR_PREVENTION_ITEMFRAMEBLOCKACTOR
public:
    class ItemFrameBlockActor& operator=(class ItemFrameBlockActor const&) = delete;
    ItemFrameBlockActor(class ItemFrameBlockActor const&) = delete;
    ItemFrameBlockActor() = delete;
#endif

public:
    /*0*/ virtual ~ItemFrameBlockActor();
    /*1*/ virtual void load(class Level&, class CompoundTag const&, class DataLoadHelper&);
    /*2*/ virtual bool save(class CompoundTag&) const;
    /*4*/ virtual void saveBlockData(class CompoundTag&, class BlockSource&) const;
    /*5*/ virtual void loadBlockData(class CompoundTag const&, class BlockSource&, class DataLoadHelper&);
    /*6*/ virtual void onCustomTagLoadDone(class BlockSource&);
    /*7*/ virtual void tick(class BlockSource&);
    /*8*/ virtual void onChanged(class BlockSource&);
    /*11*/ virtual void onPlace(class BlockSource&);
    /*12*/ virtual void __unk_vfn_12();
    /*13*/ virtual void onRemoved(class BlockSource&);
    /*14*/ virtual void triggerEvent(int, int);
    /*15*/ virtual void clearCache();
    /*16*/ virtual void __unk_vfn_16();
    /*17*/ virtual float getShadowRadius(class BlockSource&) const;
    /*18*/ virtual void __unk_vfn_18();
    /*19*/ virtual void __unk_vfn_19();
    /*21*/ virtual std::string const& getCustomName() const;
    /*23*/ virtual std::string getName() const;
    /*25*/ virtual std::string getImmersiveReaderText(class BlockSource&);
    /*26*/ virtual int getRepairCost() const;
    /*27*/ virtual class PistonBlockActor* getOwningPiston(class BlockSource&);
    /*28*/ virtual void __unk_vfn_28();
    /*29*/ virtual void __unk_vfn_29();
    /*30*/ virtual float getDeletionDelayTimeSeconds() const;
    /*31*/ virtual void __unk_vfn_31();
    /*32*/ virtual void __unk_vfn_32();
    /*33*/ virtual void __unk_vfn_33();
    /*34*/ virtual std::unique_ptr<class BlockActorDataPacket> _getUpdatePacket(class BlockSource&);
    /*35*/ virtual void _onUpdatePacket(class CompoundTag const&, class BlockSource&);
    /*36*/ virtual void __unk_vfn_36();
    /*
    inline  ~ItemFrameBlockActor(){
         (ItemFrameBlockActor::*rv)();
        *((void**)&rv) = dlsym("??1ItemFrameBlockActor@@UEAA@XZ");
        return (this->*rv)();
    }
    */
    MCAPI ItemFrameBlockActor(class BlockPos);
    MCAPI ItemFrameBlockActor(class BlockPos, enum BlockActorType, std::string);
    MCAPI void actuallyDropItem(class BlockSource&, bool);
    MCAPI void dropFramedItem(class BlockSource&, bool);
    MCAPI class ItemInstance& getFramedItem();
    MCAPI float getRotation();
    MCAPI void rotateFramedItem();
    MCAPI void setItem(class BlockSource&, class ItemInstance const&);
    MCAPI void updateNameTag();
    MCAPI static float const ROTATION_DEGREES;

protected:

private:
    MCAPI void _checkMapRemoval(class BlockSource&, class ItemInstance&);
    MCAPI void _updateBit(class BlockSource&, class ItemStateVariant<bool> const&, class HashedString const&);

};