// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

class WorldGenerator {

#define AFTER_EXTRA
// Add Member There
public:
struct BlockVolumeDimensions {
    BlockVolumeDimensions() = delete;
    BlockVolumeDimensions(BlockVolumeDimensions const&) = delete;
    BlockVolumeDimensions(BlockVolumeDimensions const&&) = delete;
};

#undef AFTER_EXTRA

#ifndef DISABLE_CONSTRUCTOR_PREVENTION_WORLDGENERATOR
public:
    class WorldGenerator& operator=(class WorldGenerator const&) = delete;
    WorldGenerator(class WorldGenerator const&) = delete;
#endif

public:
    /*0*/ virtual ~WorldGenerator();
    /*
    inline void debugRender(){
        void (WorldGenerator::*rv)();
        *((void**)&rv) = dlsym("?debugRender@WorldGenerator@@UEAAXXZ");
        return (this->*rv)();
    }
    inline void addHardcodedSpawnAreas(class LevelChunk& a0){
        void (WorldGenerator::*rv)(class LevelChunk&);
        *((void**)&rv) = dlsym("?addHardcodedSpawnAreas@WorldGenerator@@UEAAXAEAVLevelChunk@@@Z");
        return (this->*rv)(std::forward<class LevelChunk&>(a0));
    }
    inline class std::optional<short> getPreliminarySurfaceLevel(class DividedPos2d<4> a0) const{
        class std::optional<short> (WorldGenerator::*rv)(class DividedPos2d<4>) const;
        *((void**)&rv) = dlsym("?getPreliminarySurfaceLevel@WorldGenerator@@UEBA?AV?$optional@F@std@@V?$DividedPos2d@$03@@@Z");
        return (this->*rv)(std::forward<class DividedPos2d<4>>(a0));
    }
    inline  ~WorldGenerator(){
         (WorldGenerator::*rv)();
        *((void**)&rv) = dlsym("??1WorldGenerator@@UEAA@XZ");
        return (this->*rv)();
    }
    */
    MCAPI WorldGenerator();
    MCAPI static enum StructureFeatureType getFeatureId(std::string const&);
    MCAPI static class gsl::basic_string_span<char const, -1> getFeatureName(enum StructureFeatureType);

protected:
    MCAPI static unsigned __int64 const TICKING_QUEUE_PASS_LIMIT;

private:

};