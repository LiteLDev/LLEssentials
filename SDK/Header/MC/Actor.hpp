// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "VehicleUtils.hpp"

#define BEFORE_EXTRA
// Add include headers & pre-declares
#include "MobEffectInstance.hpp"
#include "Command.hpp"
#include "Tick.hpp"
class Actor;
class Player;
class NetworkIdentifier;
class CompoundTag;
class UserEntityIdentifierComponent;
class Vec2;
class BlockInstance;
class ItemStack;
class BlockSource;
enum class FaceID : char;

#undef BEFORE_EXTRA

class Actor {

#define AFTER_EXTRA
// Add new members to class
public:
	enum InitializationMethod;

    LIAPI std::string getTypeName() const;
    LIAPI Vec3 getPosition() const;
    LIAPI BlockSource* getBlockSource() const;
    LIAPI Vec2* getDirection() const;
    LIAPI ActorUniqueID getActorUniqueId() const;
    LIAPI Vec3 getCameraPos() const;
    LIAPI Tick* getLastTick() const;
    LIAPI std::vector<std::string> getAllTags();
    LIAPI BlockInstance getBlockFromViewVector(bool includeLiquid = false, bool solidOnly = false, float maxDistance = 5.25f, bool ignoreBorderBlocks = true, bool fullOnly = false) const;
    LIAPI BlockInstance getBlockFromViewVector(FaceID& face, bool includeLiquid = false, bool solidOnly = false, float maxDistance = 5.25f, bool ignoreBorderBlocks = true, bool fullOnly = false) const;
	LIAPI UserEntityIdentifierComponent* getUserEntityIdentifierComponent() const;
    LIAPI Actor* getActorFromViewVector(float maxDistance);
    LIAPI BlockPos getBlockPos();
    LIAPI BlockInstance getBlockStandingOn() const;

	LIAPI bool isSimulatedPlayer() const;
	LIAPI bool isPlayer() const;
    LIAPI bool isItemActor() const;
    LIAPI bool isOnGround() const;
    LIAPI bool setOnFire(int time, bool isEffect);
    LIAPI bool stopFire();
    LIAPI bool hasTag(const string& tag);
	LIAPI bool hurtEntity(int damage);
	LIAPI bool teleport(Vec3 pos,int dimid);
    LIAPI ItemStack* getHandSlot();
    LIAPI bool rename(const string& name);
    LIAPI std::unique_ptr<CompoundTag> getNbt();
    LIAPI bool setNbt(CompoundTag* nbt);
    LIAPI bool refreshActorData();
    LIAPI bool addEffect(MobEffect::EffectType type, int tick, int level, bool ambient = false, bool showParticles = true, bool showAnimation = false);

	//For Compatibility
	inline Vec3 getPos() { return getPosition(); }

#undef AFTER_EXTRA

#ifndef DISABLE_CONSTRUCTOR_PREVENTION_ACTOR
public:
    class Actor& operator=(class Actor const&) = delete;
    Actor(class Actor const&) = delete;
    Actor() = delete;
#endif

public:
    /*0*/ virtual bool hasComponent(class HashedString const&) const;
    /*1*/ virtual class Mob* getLastHurtByMob();
    /*2*/ virtual void setLastHurtByMob(class Mob*);
    /*3*/ virtual class Player* getLastHurtByPlayer();
    /*4*/ virtual void setLastHurtByPlayer(class Player*);
    /*5*/ virtual class Mob* getLastHurtMob();
    /*6*/ virtual void setLastHurtMob(class Actor*);
    /*7*/ virtual void outOfWorld();
    /*8*/ virtual void reloadHardcoded(enum Actor::InitializationMethod, class VariantParameterList const&);
    /*9*/ virtual void reloadHardcodedClient(enum Actor::InitializationMethod, class VariantParameterList const&);
    /*10*/ virtual void initializeComponents(enum Actor::InitializationMethod, class VariantParameterList const&);
    /*11*/ virtual void reloadComponents(enum Actor::InitializationMethod, class VariantParameterList const&);
    /*12*/ virtual void _serverInitItemStackIds();
    /*13*/ virtual void _doInitialMove();
    /*14*/ virtual ~Actor();
    /*15*/ virtual void reset();
    /*16*/ virtual int getOnDeathExperience();
    /*17*/ virtual enum ActorType getOwnerEntityType();
    /*18*/ virtual void remove();
    /*19*/ virtual void setPos(class Vec3 const&);
    /*20*/ virtual void __unk_vfn_20();
    /*21*/ virtual struct PredictedMovementValues const& getPredictedMovementValues() const;
    /*22*/ virtual void __unk_vfn_22();
    /*23*/ virtual class Vec3 const& getPosOld() const;
    /*24*/ virtual class Vec3 const getPosExtrapolated(float) const;
    /*25*/ virtual class Vec3 getAttachPos(enum ActorLocation, float) const;
    /*26*/ virtual class Vec3 getFiringPos() const;
    /*27*/ virtual void setRot(class Vec2 const&);
    /*28*/ virtual void move(class Vec3 const&);
    /*29*/ virtual void move(struct IActorMovementProxy&, class Vec3 const&) const;
    /*30*/ virtual class Vec3 getInterpolatedRidingPosition(float) const;
    /*31*/ virtual float getInterpolatedBodyRot(float) const;
    /*32*/ virtual float getInterpolatedHeadRot(float) const;
    /*33*/ virtual float getInterpolatedBodyYaw(float) const;
    /*34*/ virtual float getYawSpeedInDegreesPerSecond() const;
    /*35*/ virtual float getInterpolatedWalkAnimSpeed(float) const;
    /*36*/ virtual class Vec3 getInterpolatedRidingOffset(float) const;
    /*37*/ virtual void checkBlockCollisions(class AABB const&, class std::function<void (class BlockSource& , class Block const& , class BlockPos const& , class Actor& )>);
    /*38*/ virtual void updateEntityInside(class AABB const&);
    /*39*/ virtual void updateEntityInside();
    /*40*/ virtual bool isFireImmune() const;
    /*41*/ virtual void __unk_vfn_41();
    /*42*/ virtual void blockedByShield(class ActorDamageSource const&, class Actor&);
    /*43*/ virtual void teleportTo(class Vec3 const&, bool, int, int);
    /*44*/ virtual bool tryTeleportTo(class Vec3 const&, bool, bool, int, int);
    /*45*/ virtual void chorusFruitTeleport(class Vec3 const&);
    /*46*/ virtual void lerpMotion(class Vec3 const&);
    /*47*/ virtual std::unique_ptr<class AddActorBasePacket> tryCreateAddActorPacket();
    /*48*/ virtual void normalTick();
    /*49*/ virtual void baseTick();
    /*50*/ virtual void vehicleTick();
    /*51*/ virtual void positionPassenger(class Actor&, float);
    /*52*/ virtual float getRidingHeight();
    /*53*/ virtual bool startRiding(class Actor&);
    /*54*/ virtual void addPassenger(class Actor&);
    /*55*/ virtual void flagPassengerToRemove(class Actor&);
    /*56*/ virtual std::string getExitTip(std::string const&, enum InputMode) const;
    /*57*/ virtual bool intersects(class Vec3 const&, class Vec3 const&) const;
    /*58*/ virtual bool isInWall() const;
    /*59*/ virtual bool isInvisible() const;
    /*60*/ virtual bool canShowNameTag() const;
    /*61*/ virtual void __unk_vfn_61();
    /*62*/ virtual void setNameTagVisible(bool);
    /*63*/ virtual std::string const& getNameTag() const;
    /*64*/ virtual unsigned __int64 getNameTagAsHash() const;
    /*65*/ virtual std::string getFormattedNameTag() const;
    /*66*/ virtual void filterFormattedNameTag(class UIProfanityContext const&);
    /*67*/ virtual void setNameTag(std::string const&);
    /*68*/ virtual void __unk_vfn_68();
    /*69*/ virtual void setScoreTag(std::string const&);
    /*70*/ virtual std::string const& getScoreTag() const;
    /*71*/ virtual bool isInWater() const;
    /*72*/ virtual bool hasEnteredWater() const;
    /*73*/ virtual bool isInLava() const;
    /*74*/ virtual bool isUnderLiquid(enum MaterialType) const;
    /*75*/ virtual bool isOverWater() const;
    /*76*/ virtual void setBlockMovementSlowdownMultiplier(class Vec3 const&);
    /*77*/ virtual void resetBlockMovementSlowdownMultiplier();
    /*78*/ virtual float getCameraOffset() const;
    /*79*/ virtual float getShadowHeightOffs();
    /*80*/ virtual float getShadowRadius() const;
    /*81*/ virtual class Vec3 getHeadLookVector(float) const;
    /*82*/ virtual void __unk_vfn_82();
    /*83*/ virtual bool canSee(class Actor const&) const;
    /*84*/ virtual bool canSee(class Vec3 const&) const;
    /*85*/ virtual bool isSkyLit(float);
    /*86*/ virtual float getBrightness(float) const;
    /*87*/ virtual void __unk_vfn_87();
    /*88*/ virtual void playerTouch(class Player&);
    /*89*/ virtual void onAboveBubbleColumn(bool);
    /*90*/ virtual void onInsideBubbleColumn(bool);
    /*91*/ virtual bool isImmobile() const;
    /*92*/ virtual bool isSilent();
    /*93*/ virtual void __unk_vfn_93();
    /*94*/ virtual void __unk_vfn_94();
    /*95*/ virtual void __unk_vfn_95();
    /*96*/ virtual void setSleeping(bool);
    /*97*/ virtual void __unk_vfn_97();
    /*98*/ virtual void setSneaking(bool);
    /*99*/ virtual void __unk_vfn_99();
    /*100*/ virtual void __unk_vfn_100();
    /*101*/ virtual bool isAlive() const;
    /*102*/ virtual bool isOnFire() const;
    /*103*/ virtual bool isOnHotBlock() const;
    /*104*/ virtual void __unk_vfn_104();
    /*105*/ virtual void __unk_vfn_105();
    /*106*/ virtual void __unk_vfn_106();
    /*107*/ virtual void __unk_vfn_107();
    /*108*/ virtual void __unk_vfn_108();
    /*109*/ virtual bool isAffectedByWaterBottle() const;
    /*110*/ virtual bool canAttack(class Actor*, bool) const;
    /*111*/ virtual void setTarget(class Actor*);
    /*112*/ virtual class Actor* findAttackTarget();
    /*113*/ virtual void __unk_vfn_113();
    /*114*/ virtual bool attack(class Actor&, enum ActorDamageCause const&);
    /*115*/ virtual void performRangedAttack(class Actor&, float);
    /*116*/ virtual void adjustDamageAmount(int&) const;
    /*117*/ virtual int getEquipmentCount() const;
    /*118*/ virtual void setOwner(struct ActorUniqueID);
    /*119*/ virtual void setSitting(bool);
    /*120*/ virtual void onTame();
    /*121*/ virtual void onFailedTame();
    /*122*/ virtual int getInventorySize() const;
    /*123*/ virtual int getEquipSlots() const;
    /*124*/ virtual int getChestSlots() const;
    /*125*/ virtual void setStanding(bool);
    /*126*/ virtual bool canPowerJump() const;
    /*127*/ virtual void setCanPowerJump(bool);
    /*128*/ virtual void __unk_vfn_128();
    /*129*/ virtual bool isEnchanted() const;
    /*130*/ virtual void vehicleLanded(class Vec3 const&, class Vec3 const&);
    /*131*/ virtual bool shouldRender() const;
    /*132*/ virtual void playAmbientSound();
    /*133*/ virtual enum LevelSoundEvent getAmbientSound() const;
    /*134*/ virtual bool isInvulnerableTo(class ActorDamageSource const&) const;
    /*135*/ virtual enum ActorDamageCause getBlockDamageCause(class Block const&) const;
    /*136*/ virtual void actuallyHurt(int, class ActorDamageSource const&, bool);
    /*137*/ virtual void animateHurt();
    /*138*/ virtual bool doFireHurt(int);
    /*139*/ virtual void onLightningHit();
    /*140*/ virtual void onBounceStarted(class BlockPos const&, class Block const&);
    /*141*/ virtual void feed(int);
    /*142*/ virtual void handleEntityEvent(enum ActorEvent, int);
    /*143*/ virtual float getPickRadius();
    /*144*/ virtual class HashedString const& getActorRendererId() const;
    /*145*/ virtual class ItemActor* spawnAtLocation(int, int);
    /*146*/ virtual class ItemActor* spawnAtLocation(int, int, float);
    /*147*/ virtual class ItemActor* spawnAtLocation(class Block const&, int);
    /*148*/ virtual class ItemActor* spawnAtLocation(class Block const&, int, float);
    /*149*/ virtual class ItemActor* spawnAtLocation(class ItemStack const&, float);
    /*150*/ virtual void despawn();
    /*151*/ virtual void killed(class Actor&);
    /*152*/ virtual void awardKillScore(class Actor&, int);
    /*153*/ virtual void setArmor(enum ArmorSlot, class ItemStack const&);
    /*154*/ virtual class ItemStack const& getArmor(enum ArmorSlot) const;
    /*155*/ virtual std::vector<class ItemStack const* > getAllArmor() const;
    /*156*/ virtual enum ArmorMaterialType getArmorMaterialTypeInSlot(enum ArmorSlot) const;
    /*157*/ virtual enum ArmorTextureType getArmorMaterialTextureTypeInSlot(enum ArmorSlot) const;
    /*158*/ virtual float getArmorColorInSlot(enum ArmorSlot, int) const;
    /*159*/ virtual class ItemStack const& getEquippedSlot(enum EquipmentSlot) const;
    /*160*/ virtual void setEquippedSlot(enum EquipmentSlot, class ItemStack const&);
    /*161*/ virtual class ItemStack const& getCarriedItem() const;
    /*162*/ virtual void setCarriedItem(class ItemStack const&);
    /*163*/ virtual void setOffhandSlot(class ItemStack const&);
    /*164*/ virtual class ItemStack const& getEquippedTotem() const;
    /*165*/ virtual bool consumeTotem();
    /*166*/ virtual bool save(class CompoundTag&);
    /*167*/ virtual void saveWithoutId(class CompoundTag&);
    /*168*/ virtual bool load(class CompoundTag const&, class DataLoadHelper&);
    /*169*/ virtual void loadLinks(class CompoundTag const&, std::vector<struct ActorLink>&, class DataLoadHelper&);
    /*170*/ virtual enum ActorType getEntityTypeId() const;
    /*171*/ virtual class HashedString const& queryEntityRenderer() const;
    /*172*/ virtual struct ActorUniqueID getSourceUniqueID() const;
    /*173*/ virtual void thawFreezeEffect();
    /*174*/ virtual void __unk_vfn_174();
    /*175*/ virtual bool const isWearingLeatherArmor() const;
    /*176*/ virtual class AABB getLiquidAABB(enum MaterialType) const;
    /*177*/ virtual void handleInsidePortal(class BlockPos const&);
    /*178*/ virtual int getPortalCooldown() const;
    /*179*/ virtual int getPortalWaitTime() const;
    /*180*/ virtual class AutomaticID<class Dimension, int> getDimensionId() const;
    /*181*/ virtual void __unk_vfn_181();
    /*182*/ virtual void __unk_vfn_182();
    /*183*/ virtual void changeDimension(class AutomaticID<class Dimension, int>, bool);
    /*184*/ virtual struct ActorUniqueID getControllingPlayer() const;
    /*185*/ virtual void checkFallDamage(float, bool);
    /*186*/ virtual void causeFallDamage(float, float, class ActorDamageSource);
    /*187*/ virtual void handleFallDistanceOnServer(float, float, bool);
    /*188*/ virtual void playSynchronizedSound(enum LevelSoundEvent, class Vec3 const&, class Block const&, bool);
    /*189*/ virtual void playSynchronizedSound(enum LevelSoundEvent, class Vec3 const&, int, bool);
    /*190*/ virtual void onSynchedFlagUpdate(int, __int64, __int64);
    /*191*/ virtual void onSynchedDataUpdate(int);
    /*192*/ virtual bool canAddPassenger(class Actor&) const;
    /*193*/ virtual void __unk_vfn_193();
    /*194*/ virtual void __unk_vfn_194();
    /*195*/ virtual void __unk_vfn_195();
    /*196*/ virtual void __unk_vfn_196();
    /*197*/ virtual void tickLeash();
    /*198*/ virtual void sendMotionPacketIfNeeded();
    /*199*/ virtual void __unk_vfn_199();
    /*200*/ virtual void stopRiding(bool, bool, bool);
    /*201*/ virtual void startSwimming();
    /*202*/ virtual void stopSwimming();
    /*203*/ virtual void buildDebugInfo(std::string&) const;
    /*204*/ virtual enum CommandPermissionLevel getCommandPermissionLevel() const;
    /*205*/ virtual bool isClientSide() const;
    /*206*/ virtual class AttributeInstance* getMutableAttribute(class Attribute const&);
    /*207*/ virtual class AttributeInstance const& getAttribute(class Attribute const&) const;
    /*208*/ virtual int getDeathTime() const;
    /*209*/ virtual void heal(int);
    /*210*/ virtual bool isInvertedHealAndHarm() const;
    /*211*/ virtual bool canBeAffected(int) const;
    /*212*/ virtual bool canBeAffected(class MobEffectInstance const&) const;
    /*213*/ virtual bool canBeAffectedByArrow(class MobEffectInstance const&) const;
    /*214*/ virtual void onEffectAdded(class MobEffectInstance&);
    /*215*/ virtual void onEffectUpdated(class MobEffectInstance&);
    /*216*/ virtual void onEffectRemoved(class MobEffectInstance&);
    /*217*/ virtual class AnimationComponent& getAnimationComponent();
    /*218*/ virtual void openContainerComponent(class Player&);
    /*219*/ virtual void swing();
    /*220*/ virtual void useItem(class ItemStackBase&, enum ItemUseMethod, bool);
    /*221*/ virtual void __unk_vfn_221();
    /*222*/ virtual void __unk_vfn_222();
    /*223*/ virtual void getDebugText(std::vector<std::string>&);
    /*224*/ virtual float getMapDecorationRotation() const;
    /*225*/ virtual float getPassengerYRotation(class Actor const&) const;
    /*226*/ virtual float getYHeadRot() const;
    /*227*/ virtual void __unk_vfn_227();
    /*228*/ virtual void __unk_vfn_228();
    /*229*/ virtual void __unk_vfn_229();
    /*230*/ virtual bool add(class ItemStack&);
    /*231*/ virtual bool drop(class ItemStack const&, bool);
    /*232*/ virtual bool getInteraction(class Player&, class ActorInteraction&, class Vec3 const&);
    /*233*/ virtual void __unk_vfn_233();
    /*234*/ virtual void setAuxValue(int);
    /*235*/ virtual void setSize(float, float);
    /*236*/ virtual void onOrphan();
    /*237*/ virtual void wobble();
    /*238*/ virtual bool wasHurt();
    /*239*/ virtual void startSpinAttack();
    /*240*/ virtual void stopSpinAttack();
    /*241*/ virtual void setDamageNearbyMobs(bool);
    /*242*/ virtual void __unk_vfn_242();
    /*243*/ virtual void reloadLootTable();
    /*244*/ virtual void reloadLootTable(struct EquipmentTableDefinition const&);
    /*245*/ virtual void __unk_vfn_245();
    /*246*/ virtual void kill();
    /*247*/ virtual void die(class ActorDamageSource const&);
    /*248*/ virtual bool shouldDropDeathLoot() const;
    /*249*/ virtual bool shouldTick() const;
    /*250*/ virtual void extractSnapshot(struct PlayerSnapshotComponent&) const;
    /*251*/ virtual void applySnapshot(struct PlayerSnapshotComponent const&, struct PlayerSnapshotComponent const&);
    /*252*/ virtual float getNextStep(float);
    /*253*/ virtual class LootTable* getLootTable();
    /*254*/ virtual void interpolatorTick();
    /*255*/ virtual void updateEntitySpecificMolangVariables(class RenderParams&);
    /*256*/ virtual bool shouldTryMakeStepSound();
    /*257*/ virtual void __unk_vfn_257();
    /*258*/ virtual bool _hurt(class ActorDamageSource const&, int, bool, bool);
    /*259*/ virtual void markHurt();
    /*260*/ virtual class AnimationComponent& _getAnimationComponent(class std::shared_ptr<class AnimationComponent>&, enum AnimationComponentGroup);
    /*261*/ virtual void readAdditionalSaveData(class CompoundTag const&, class DataLoadHelper&);
    /*262*/ virtual void addAdditionalSaveData(class CompoundTag&);
    /*263*/ virtual void _playStepSound(class BlockPos const&, class Block const&);
    /*264*/ virtual void _playFlySound(class BlockPos const&, class Block const&);
    /*265*/ virtual void __unk_vfn_265();
    /*266*/ virtual void checkInsideBlocks(float);
    /*267*/ virtual void pushOutOfBlocks(class Vec3 const&);
    /*268*/ virtual bool updateWaterState();
    /*269*/ virtual void doWaterSplashEffect();
    /*270*/ virtual void spawnTrailBubbles();
    /*271*/ virtual void updateInsideBlock();
    /*272*/ virtual void _removePassenger(struct ActorUniqueID const&, bool, bool, bool);
    /*273*/ virtual void _onSizeUpdated();
    /*
    inline bool inCaravan() const{
        bool (Actor::*rv)() const;
        *((void**)&rv) = dlsym("?inCaravan@Actor@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline bool canSeeInvisible() const{
        bool (Actor::*rv)() const;
        *((void**)&rv) = dlsym("?canSeeInvisible@Actor@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline bool isCreative() const{
        bool (Actor::*rv)() const;
        *((void**)&rv) = dlsym("?isCreative@Actor@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline bool isBlocking() const{
        bool (Actor::*rv)() const;
        *((void**)&rv) = dlsym("?isBlocking@Actor@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline bool isCreativeModeAllowed(){
        bool (Actor::*rv)();
        *((void**)&rv) = dlsym("?isCreativeModeAllowed@Actor@@UEAA_NXZ");
        return (this->*rv)();
    }
    inline bool canFreeze() const{
        bool (Actor::*rv)() const;
        *((void**)&rv) = dlsym("?canFreeze@Actor@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline bool isWorldBuilder() const{
        bool (Actor::*rv)() const;
        *((void**)&rv) = dlsym("?isWorldBuilder@Actor@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline bool isShootable(){
        bool (Actor::*rv)();
        *((void**)&rv) = dlsym("?isShootable@Actor@@UEAA_NXZ");
        return (this->*rv)();
    }
    inline bool breaksFallingBlocks() const{
        bool (Actor::*rv)() const;
        *((void**)&rv) = dlsym("?breaksFallingBlocks@Actor@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline bool isLeashableType(){
        bool (Actor::*rv)();
        *((void**)&rv) = dlsym("?isLeashableType@Actor@@UEAA_NXZ");
        return (this->*rv)();
    }
    inline bool hasOutputSignal(unsigned char a0) const{
        bool (Actor::*rv)(unsigned char) const;
        *((void**)&rv) = dlsym("?hasOutputSignal@Actor@@UEBA_NE@Z");
        return (this->*rv)(std::forward<unsigned char>(a0));
    }
    inline bool isAdventure() const{
        bool (Actor::*rv)() const;
        *((void**)&rv) = dlsym("?isAdventure@Actor@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline bool isPickable(){
        bool (Actor::*rv)();
        *((void**)&rv) = dlsym("?isPickable@Actor@@UEAA_NXZ");
        return (this->*rv)();
    }
    inline bool isLocalPlayer() const{
        bool (Actor::*rv)() const;
        *((void**)&rv) = dlsym("?isLocalPlayer@Actor@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline bool _makeFlySound() const{
        bool (Actor::*rv)() const;
        *((void**)&rv) = dlsym("?_makeFlySound@Actor@@MEBA_NXZ");
        return (this->*rv)();
    }
    inline bool isJumping() const{
        bool (Actor::*rv)() const;
        *((void**)&rv) = dlsym("?isJumping@Actor@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline bool isPlayer() const{
        bool (Actor::*rv)() const;
        *((void**)&rv) = dlsym("?isPlayer@Actor@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline bool isDamageBlocked(class ActorDamageSource const& a0) const{
        bool (Actor::*rv)(class ActorDamageSource const&) const;
        *((void**)&rv) = dlsym("?isDamageBlocked@Actor@@UEBA_NAEBVActorDamageSource@@@Z");
        return (this->*rv)(std::forward<class ActorDamageSource const&>(a0));
    }
    inline bool canBePulledIntoVehicle() const{
        bool (Actor::*rv)() const;
        *((void**)&rv) = dlsym("?canBePulledIntoVehicle@Actor@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline bool isSleeping() const{
        bool (Actor::*rv)() const;
        *((void**)&rv) = dlsym("?isSleeping@Actor@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline bool getAlwaysShowNameTag() const{
        bool (Actor::*rv)() const;
        *((void**)&rv) = dlsym("?getAlwaysShowNameTag@Actor@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline bool interactPreventDefault(){
        bool (Actor::*rv)();
        *((void**)&rv) = dlsym("?interactPreventDefault@Actor@@UEAA_NXZ");
        return (this->*rv)();
    }
    inline int getOutputSignal() const{
        int (Actor::*rv)() const;
        *((void**)&rv) = dlsym("?getOutputSignal@Actor@@UEBAHXZ");
        return (this->*rv)();
    }
    inline class Actor* findAttackTarget(){
        class Actor* (Actor::*rv)();
        *((void**)&rv) = dlsym("?findAttackTarget@Actor@@UEAAPEAV1@XZ");
        return (this->*rv)();
    }
    inline void _onSizeUpdated(){
        void (Actor::*rv)();
        *((void**)&rv) = dlsym("?_onSizeUpdated@Actor@@EEAAXXZ");
        return (this->*rv)();
    }
    inline void reloadHardcoded(enum Actor::InitializationMethod a0, class VariantParameterList const& a1){
        void (Actor::*rv)(enum Actor::InitializationMethod, class VariantParameterList const&);
        *((void**)&rv) = dlsym("?reloadHardcoded@Actor@@MEAAXW4InitializationMethod@1@AEBVVariantParameterList@@@Z");
        return (this->*rv)(std::forward<enum Actor::InitializationMethod>(a0), std::forward<class VariantParameterList const&>(a1));
    }
    inline void changeDimension(class ChangeDimensionPacket const& a0){
        void (Actor::*rv)(class ChangeDimensionPacket const&);
        *((void**)&rv) = dlsym("?changeDimension@Actor@@UEAAXAEBVChangeDimensionPacket@@@Z");
        return (this->*rv)(std::forward<class ChangeDimensionPacket const&>(a0));
    }
    inline void renderDebugServerState(class Options const& a0){
        void (Actor::*rv)(class Options const&);
        *((void**)&rv) = dlsym("?renderDebugServerState@Actor@@UEAAXAEBVOptions@@@Z");
        return (this->*rv)(std::forward<class Options const&>(a0));
    }
    inline void _doAutoAttackOnTouch(class Actor& a0){
        void (Actor::*rv)(class Actor&);
        *((void**)&rv) = dlsym("?_doAutoAttackOnTouch@Actor@@EEAAXAEAV1@@Z");
        return (this->*rv)(std::forward<class Actor&>(a0));
    }
    inline void updateEntitySpecificMolangVariables(class RenderParams& a0){
        void (Actor::*rv)(class RenderParams&);
        *((void**)&rv) = dlsym("?updateEntitySpecificMolangVariables@Actor@@MEAAXAEAVRenderParams@@@Z");
        return (this->*rv)(std::forward<class RenderParams&>(a0));
    }
    inline bool canChangeDimensions() const{
        bool (Actor::*rv)() const;
        *((void**)&rv) = dlsym("?canChangeDimensions@Actor@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline bool canSynchronizeNewEntity() const{
        bool (Actor::*rv)() const;
        *((void**)&rv) = dlsym("?canSynchronizeNewEntity@Actor@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline bool canDestroyBlock(class Block const& a0) const{
        bool (Actor::*rv)(class Block const&) const;
        *((void**)&rv) = dlsym("?canDestroyBlock@Actor@@UEBA_NAEBVBlock@@@Z");
        return (this->*rv)(std::forward<class Block const&>(a0));
    }
    inline bool isRuntimePredictedMovementEnabled() const{
        bool (Actor::*rv)() const;
        *((void**)&rv) = dlsym("?isRuntimePredictedMovementEnabled@Actor@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline bool canExistInPeaceful() const{
        bool (Actor::*rv)() const;
        *((void**)&rv) = dlsym("?canExistInPeaceful@Actor@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline bool isValidTarget(class Actor* a0) const{
        bool (Actor::*rv)(class Actor*) const;
        *((void**)&rv) = dlsym("?isValidTarget@Actor@@UEBA_NPEAV1@@Z");
        return (this->*rv)(std::forward<class Actor*>(a0));
    }
    inline bool isFishable() const{
        bool (Actor::*rv)() const;
        *((void**)&rv) = dlsym("?isFishable@Actor@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline bool isTargetable() const{
        bool (Actor::*rv)() const;
        *((void**)&rv) = dlsym("?isTargetable@Actor@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline bool canMakeStepSound() const{
        bool (Actor::*rv)() const;
        *((void**)&rv) = dlsym("?canMakeStepSound@Actor@@MEBA_NXZ");
        return (this->*rv)();
    }
    inline bool isSurfaceMob() const{
        bool (Actor::*rv)() const;
        *((void**)&rv) = dlsym("?isSurfaceMob@Actor@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline bool canPickupItem(class ItemStack const& a0) const{
        bool (Actor::*rv)(class ItemStack const&) const;
        *((void**)&rv) = dlsym("?canPickupItem@Actor@@UEBA_NAEBVItemStack@@@Z");
        return (this->*rv)(std::forward<class ItemStack const&>(a0));
    }
    inline float getDeletionDelayTimeSeconds() const{
        float (Actor::*rv)() const;
        *((void**)&rv) = dlsym("?getDeletionDelayTimeSeconds@Actor@@UEBAMXZ");
        return (this->*rv)();
    }
    inline  ~Actor(){
         (Actor::*rv)();
        *((void**)&rv) = dlsym("??1Actor@@UEAA@XZ");
        return (this->*rv)();
    }
    inline class Vec3 const& getPos() const{
        class Vec3 const& (Actor::*rv)() const;
        *((void**)&rv) = dlsym("?getPos@Actor@@UEBAAEBVVec3@@XZ");
        return (this->*rv)();
    }
    */
    MCAPI Actor(class ILevel&, class EntityContext&);
    MCAPI Actor(class ActorDefinitionGroup*, struct ActorDefinitionIdentifier const&, class EntityContext&);
    MCAPI class Vec3 _randomHeartPos();
    MCAPI void _sendDirtyActorData();
    MCAPI void _setActorTypeId(enum ActorType);
    MCAPI void _setLevelPtr(class Level*);
    MCAPI void addDefinitionGroup(std::string const&);
    MCAPI void addEffect(class MobEffectInstance const&);
    MCAPI bool addTag(std::string const&);
    MCAPI void buildDebugGroupInfo(std::string&) const;
    MCAPI class Vec3 buildForward() const;
    MCAPI void burn(int, bool);
    MCAPI void cacheComponentData();
    MCAPI class Vec3 calcCenterPos() const;
    MCAPI int calculateAttackDamage(class Actor&);
    MCAPI bool canAscendCurrentBlockByJumping() const;
    MCAPI bool canBeginOrContinueClimbingLadder() const;
    MCAPI bool canCurrentlySwim() const;
    MCAPI bool canDescendBlockBelowByCrouching() const;
    MCAPI bool canFly() const;
    MCAPI bool canMate(class Actor const&) const;
    MCAPI void celebrateHunt(int, bool);
    MCAPI void clearFishingHookID();
    MCAPI void consumeItem(class ItemActor&, int);
    MCAPI class UpdateEquipPacket createUpdateEquipPacket(int);
    MCAPI class UpdateTradePacket createUpdateTradePacket(int);
    MCAPI void deregisterTagsFromLevelCache();
    MCAPI float distanceSqrToBlockPosCenter(class BlockPos const&) const;
    MCAPI float distanceTo(class Actor const&) const;
    MCAPI float distanceTo(class Vec3 const&) const;
    MCAPI float distanceToSqr(class Actor const&) const;
    MCAPI float distanceToSqr(class Vec3 const&) const;
    MCAPI void dropLeash(bool, bool);
    MCAPI void dropTowards(class ItemStack const&, class Vec3);
    MCAPI bool executeEvent(std::string const&, class VariantParameterList const&);
    MCAPI void exitVehicle(class Actor const&, class std::optional<class Vec3> (* )(struct VehicleUtils::VehicleDirections const& , class std::function<bool (class Vec3 const& , class Vec3 const& )>));
    MCAPI class FishingHook* fetchFishingHook();
    MCAPI std::vector<struct DistanceSortedActor> fetchNearbyActorsSorted(class Vec3 const&, enum ActorType);
    MCAPI void forEachLeashedActor(class std::function<void (class gsl::not_null<class Actor* >)>);
    MCAPI class AABBShape const& getAABBShape() const;
    MCAPI int getActiveEffectCount() const;
    MCAPI struct ActorDefinitionIdentifier const& getActorIdentifier() const;
    MCAPI std::vector<class MobEffectInstance> const& getAllEffects() const;
    MCAPI class SimpleContainer& getArmorContainer();
    MCAPI class SimpleContainer const& getArmorContainer() const;
    MCAPI class gsl::not_null<class BaseAttributeMap* > getAttributes();
    MCAPI class BlockPos getBlockPosCurrentlyStandingOn(class Actor*) const;
    MCAPI class BlockPos getBlockTarget() const;
    MCAPI bool getCanPickupItems() const;
    MCAPI class ItemStack const& getCarriedItemInSlotPreferredBy(class ItemStack const&) const;
    MCAPI bool getChainedDamageEffects() const;
    MCAPI bool getCollidableMobNear();
    MCAPI enum PaletteColor getColor() const;
    MCAPI enum PaletteColor getColor2() const;
    MCAPI int getControllingSeat();
    MCAPI float getCurrentSwimAmount() const;
    MCAPI bool getDamageNearbyMobs() const;
    MCAPI class ActorDefinitionDiffList* getDiffList();
    MCAPI class Dimension& getDimension() const;
    MCAPI class Dimension const& getDimensionConst() const;
    MCAPI class EconomyTradeableComponent* getEconomyTradeableComponent() const;
    MCAPI class MobEffectInstance const* getEffect(class MobEffect const&) const;
    MCAPI class SynchedActorData& getEntityData();
    MCAPI class SynchedActorData const& getEntityData() const;
    MCAPI class ActorTerrainInterlockData& getEntityTerrainInterlockData();
    MCAPI enum EquipmentSlot getEquipmentSlotForItem(class ItemStack const&) const;
    MCAPI bool getFirstAvailableSeatPos(class Actor&, class Vec3&) const;
    MCAPI class Actor* getFirstPassenger() const;
    MCAPI class SimpleContainer& getHandContainer();
    MCAPI class SimpleContainer const& getHandContainer() const;
    MCAPI int getHealth() const;
    MCAPI int getHurtDir() const;
    MCAPI int getHurtTime() const;
    MCAPI enum Actor::InitializationMethod getInitializationMethod();
    MCAPI class Vec3 getInterpolatedPosition(float) const;
    MCAPI class Vec2 getInterpolatedRotation(float) const;
    MCAPI int getJumpDuration() const;
    MCAPI int getLastHurtByMobTime();
    MCAPI int getLastHurtByMobTimestamp();
    MCAPI enum ActorDamageCause getLastHurtCause() const;
    MCAPI int getLastHurtDamage() const;
    MCAPI int getLastHurtMobTimestamp();
    MCAPI unsigned __int64 getLastHurtTimestamp() const;
    MCAPI struct ActorUniqueID getLeashHolder() const;
    MCAPI class Level const& getLevel() const;
    MCAPI class Level& getLevel();
    MCAPI int getLimitedLifetimeTicks() const;
    MCAPI std::vector<struct ActorLink> getLinks() const;
    MCAPI int getMarkVariant() const;
    MCAPI int getMaxHealth() const;
    MCAPI class MolangVariableMap& getMolangVariables();
    MCAPI class gsl::not_null<class std::shared_ptr<struct IActorMovementProxy> > getMovementProxy();
    MCAPI class gsl::not_null<class std::shared_ptr<struct IActorMovementProxy const> > getMovementProxy() const;
    MCAPI class ItemStack const& getOffhandSlot() const;
    MCAPI class Mob* getOwner() const;
    MCAPI struct ActorUniqueID const getOwnerId() const;
    MCAPI int getPassengerIndex(class Actor const&) const;
    MCAPI std::unique_ptr<class CompoundTag> getPersistingTradeOffers();
    MCAPI int getPersistingTradeRiches();
    MCAPI class Player* getPlayerOwner() const;
    MCAPI enum PortalAxis getPortalEntranceAxis() const;
    MCAPI float getRadius() const;
    MCAPI class Random& getRandom() const;
    MCAPI class BlockSource& getRegion() const;
    MCAPI class BlockSource const& getRegionConst() const;
    MCAPI class RenderParams& getRenderParams();
    MCAPI class Vec2 getRotation() const;
    MCAPI class ActorRuntimeID getRuntimeID() const;
    MCAPI int getShakeTime() const;
    MCAPI int getSkinID() const;
    MCAPI class SpatialActorNetworkData& getSpatialNetworkData();
    MCAPI class SpatialActorNetworkData const& getSpatialNetworkData() const;
    MCAPI float getSpeedInMetersPerSecond() const;
    MCAPI class StateVector const& getStateVector() const;
    MCAPI class StateVector& getStateVectorNonConst();
    MCAPI bool getStatusFlag(enum ActorFlags) const;
    MCAPI int getStrength() const;
    MCAPI int getStrengthMax() const;
    MCAPI int getStructuralIntegrity() const;
    MCAPI float getSwimAmount(float) const;
    MCAPI class gsl::span<std::string, -1> const getTags() const;
    MCAPI class Actor* getTarget() const;
    MCAPI struct ActorUniqueID getTargetId();
    MCAPI class ITickingArea* getTickingArea();
    MCAPI bool getTradeInterest() const;
    MCAPI class MerchantRecipeList* getTradeOffers();
    MCAPI class Player* getTradingPlayer() const;
    MCAPI struct ActorUniqueID const& getUniqueID() const;
    MCAPI int getVariant() const;
    MCAPI class Actor* getVehicle() const;
    MCAPI class Actor* getVehicleRoot() const;
    MCAPI class ActorRuntimeID getVehicleRuntimeID() const;
    MCAPI float getVerticalSpeedInMetersPerSecond() const;
    MCAPI class Vec3 getViewVector(float) const;
    MCAPI bool hasAnyEffects() const;
    MCAPI bool hasAnyVisibleEffects() const;
    MCAPI bool hasBeenHurtByMobInLastTicks(int) const;
    MCAPI bool hasCategory(enum ActorCategory) const;
    MCAPI bool hasDefinitionGroup(std::string const&) const;
    MCAPI bool hasDimension() const;
    MCAPI bool hasEffect(class MobEffect const&) const;
    MCAPI bool hasFamily(class HashedString const&) const;
    MCAPI bool hasFishingHook() const;
    MCAPI bool hasLevel() const;
    MCAPI bool hasPassenger() const;
    MCAPI bool hasPersistingTrade() const;
    MCAPI bool hasPlayerPassenger() const;
    MCAPI bool hasPriorityAmmunition() const;
    MCAPI bool hasRuntimeID() const;
    MCAPI bool hasSaddle() const;
    MCAPI bool hasTag(std::string const&) const;
    MCAPI bool hasTags() const;
    MCAPI bool hasTeleported() const;
    MCAPI bool hasTickingArea() const;
    MCAPI bool hasTotemEquipped() const;
    MCAPI bool hasType(enum ActorType) const;
    MCAPI bool hasUniqueID() const;
    MCAPI void healEffects(int);
    MCAPI bool hurt(class ActorDamageSource const&, int, bool, bool);
    MCAPI bool inDownwardFlowingLiquid() const;
    MCAPI void initActorProperties();
    MCAPI void initParams(class VariantParameterList&);
    MCAPI bool isActorLocationInMaterial(enum ActorLocation, enum MaterialType) const;
    MCAPI bool isAngry() const;
    MCAPI bool isAutonomous() const;
    MCAPI bool isBaby() const;
    MCAPI bool isBreakingObstruction() const;
    MCAPI bool isBribed() const;
    MCAPI bool isCharged() const;
    MCAPI bool isChested() const;
    MCAPI bool isClimbing() const;
    MCAPI bool isControlledByLocalInstance() const;
    MCAPI bool isDoorBreaker() const;
    MCAPI bool isDoorOpener() const;
    MCAPI bool isGlobal() const;
    MCAPI bool isIgnited() const;
    MCAPI bool isImmersedInWater() const;
    MCAPI bool isInClouds() const;
    MCAPI bool isInContactWithWater() const;
    MCAPI bool isInLove() const;
    MCAPI bool isInPrecipitation() const;
    MCAPI bool isInRain() const;
    MCAPI bool isInScaffolding() const;
    MCAPI bool isInSnow() const;
    MCAPI bool isInThunderstorm() const;
    MCAPI bool isInWaterOrRain() const;
    MCAPI bool isInWorld() const;
    MCAPI bool isInsideBorderBlock(float) const;
    MCAPI bool isInsidePortal() const;
    MCAPI bool isLayingDown() const;
    MCAPI bool isLeashed() const;
    MCAPI bool isMovedToLimbo() const;
    MCAPI bool isMoving() const;
    MCAPI bool isOrphan() const;
    MCAPI bool isOutOfControl() const;
    MCAPI bool isOverScaffolding() const;
    MCAPI bool isPacified() const;
    MCAPI bool isPassenger(struct ActorUniqueID const&) const;
    MCAPI bool isPassenger(class Actor const&) const;
    MCAPI bool isPersistent() const;
    MCAPI bool isPlayingDead() const;
    MCAPI bool isPowered() const;
    MCAPI bool isRegionValid() const;
    MCAPI bool isRemoved() const;
    MCAPI bool isResting() const;
    MCAPI bool isRiding(class Actor*) const;
    MCAPI bool isRiding() const;
    MCAPI bool isSafeToSleepNear() const;
    MCAPI bool isSheared() const;
    MCAPI bool isSitting() const;
    MCAPI bool isSneaking() const;
    MCAPI bool isStackable() const;
    MCAPI bool isStanding() const;
    MCAPI bool isSwimmer() const;
    MCAPI bool isSwimming() const;
    MCAPI bool isTame() const;
    MCAPI bool isTickingEntity() const;
    MCAPI bool isTouchingDamageBlock() const;
    MCAPI bool isTrading() const;
    MCAPI bool isTrusting() const;
    MCAPI bool isType(enum ActorType) const;
    MCAPI bool isUseNewTradeScreen() const;
    MCAPI bool isWASDControlled();
    MCAPI bool isWalker() const;
    MCAPI void lerpTo(class Vec3 const&, class Vec2 const&, int);
    MCAPI void lerpTo(class Vec3 const&, class Vec2 const&, float, int);
    MCAPI void lerpToRotation(class Vec2 const&, int);
    MCAPI void loadEntityFlags(class CompoundTag const&, class DataLoadHelper&);
    MCAPI struct ActorUniqueID const& lovePartnerId() const;
    MCAPI void migrateUniqueID(struct ActorUniqueID);
    MCAPI void moveBBs(class Vec3 const&);
    MCAPI void moveRelative(float, float, float, float);
    MCAPI void moveTo(class Vec3 const&, class Vec2 const&);
    MCAPI void onAffectedByWaterBottle();
    MCAPI bool onClimbableBlock() const;
    MCAPI bool onHoverableBlock() const;
    MCAPI void onOnewayCollision(class AABB const&);
    MCAPI bool operator==(class Actor&);
    MCAPI void pickUpItem(class ItemActor&, int);
    MCAPI void playSound(enum LevelSoundEvent, class Vec3 const&, class Block const&);
    MCAPI void playSound(enum LevelSoundEvent, class Vec3 const&, int);
    MCAPI void positionAllPassengers();
    MCAPI bool pullInEntity(class Actor&);
    MCAPI void pushBackActionEventToActionQueue(class ActionEvent);
    MCAPI void refreshComponents();
    MCAPI void reload();
    MCAPI void reloadProperties();
    MCAPI void removeAllEffects();
    MCAPI void removeAllPassengers(bool, bool);
    MCAPI void removeEffect(int);
    MCAPI void removeEffectParticles();
    MCAPI void removePersistingTrade();
    MCAPI bool removeTag(std::string const&);
    MCAPI void resetClientAnimations();
    MCAPI void resetRegion();
    MCAPI void saveEntityFlags(class CompoundTag&);
    MCAPI std::unique_ptr<class ListTag> saveLinks() const;
    MCAPI void savePersistingTrade(std::unique_ptr<class CompoundTag>, int);
    MCAPI void sendActorDefinitionEventTriggered(std::string const&);
    MCAPI void sendMotionToServer();
    MCAPI void serializationSetHealth(int);
    MCAPI void setAABB(class AABB const&);
    MCAPI void setAABBDim(class Vec2 const&);
    MCAPI void setActorRendererId(class HashedString);
    MCAPI void setAutonomous(bool);
    MCAPI void setBaseDefinition(struct ActorDefinitionIdentifier const&, bool, bool);
    MCAPI void setBlockTarget(class BlockPos const&);
    MCAPI void setBreakingObstruction(bool);
    MCAPI void setCanClimb(bool);
    MCAPI void setCanFly(bool);
    MCAPI void setChainedDamageEffects(bool);
    MCAPI void setCharged(bool);
    MCAPI void setClimbing(bool);
    MCAPI void setCollidableMob(bool);
    MCAPI void setCollidableMobNear(bool);
    MCAPI void setColor(enum PaletteColor);
    MCAPI void setColor2(enum PaletteColor);
    MCAPI void setControllingSeat(int);
    MCAPI void setDancing(bool);
    MCAPI void setDoorBreaker(bool);
    MCAPI void setDoorOpener(bool);
    MCAPI void setEnchanted(bool);
    MCAPI void setFishingHookID(struct ActorUniqueID);
    MCAPI void setGlobal(bool);
    MCAPI void setHurtDir(int);
    MCAPI void setHurtTime(int);
    MCAPI void setInLove(class Actor*);
    MCAPI void setInterpolation(bool);
    MCAPI void setInvisible(bool);
    MCAPI void setJumpDuration(int);
    MCAPI void setLastHitBB(class Vec3 const&, class Vec3 const&);
    MCAPI void setLayingDown(bool);
    MCAPI void setLeashHolder(struct ActorUniqueID);
    MCAPI void setLimitedLifetimeTicks(int);
    MCAPI void setMarkVariant(int);
    MCAPI void setMovedToLimbo(bool);
    MCAPI void setMoving(bool);
    MCAPI void setPersistent();
    MCAPI void setPosDirectLegacy(class Vec3 const&);
    MCAPI void setPosPrev(class Vec3 const&);
    MCAPI void setPreviousPosRot(class Vec3 const&, class Vec2 const&);
    MCAPI void setRegion(class BlockSource&);
    MCAPI void setResting(bool);
    MCAPI void setRuntimeID(class ActorRuntimeID);
    MCAPI void setSaddle(bool);
    MCAPI void setScared(bool);
    MCAPI void setSeatDescription(class Vec3 const&, struct SeatDescription const&);
    MCAPI void setShakeTime(int);
    MCAPI void setSkinID(int);
    MCAPI bool setStatusFlag(enum ActorFlags, bool);
    MCAPI void setStrength(int);
    MCAPI void setStrengthMax(int);
    MCAPI void setStructuralIntegrity(int);
    MCAPI void setStunned(bool);
    MCAPI void setSwimmer(bool);
    MCAPI void setTempted(bool);
    MCAPI void setTradeInterest(bool);
    MCAPI void setTradingPlayer(class Player*);
    MCAPI void setUniqueID(struct ActorUniqueID);
    MCAPI void setVariant(int);
    MCAPI void setVelocity(class Vec3 const&);
    MCAPI void setWASDControlled(bool);
    MCAPI void setWalker(bool);
    MCAPI bool shouldOrphan(class BlockSource&);
    MCAPI bool shouldUpdateEffects() const;
    MCAPI void spawnBalloonPopParticles();
    MCAPI void spawnDeathParticles();
    MCAPI void spawnDustParticles(int);
    MCAPI void spawnEatParticles(class ItemStack const&, int);
    MCAPI void spawnTamingParticles(bool);
    MCAPI void teleportPassengersTo(class Vec3 const&, int, int);
    MCAPI void testForEntityStacking(class BlockSource&, class AABB const&, std::vector<class AABB>&);
    MCAPI bool tick(class BlockSource&);
    MCAPI void tickBlockDamage();
    MCAPI void transferTickingArea(class Dimension&);
    MCAPI std::vector<class ItemDescriptor> const* tryGetEquippableSlotAllowedItems(int) const;
    MCAPI bool tryMoveChunks();
    MCAPI void updateAnimationComponentOnServer();
    MCAPI void updateBBFromDefinition();
    MCAPI void updateDescription();
    MCAPI void updateInvisibilityStatus();
    MCAPI void updateMolangVariables(class RenderParams&);
    MCAPI void updateTickingData();
    MCAPI bool useSaddle(class ItemStackBase&, class Player*);
    MCAPI bool wasLastHitByPlayer();
    MCAPI bool wasLoadedFromNBTThisFrame() const;
    MCAPI static float const DEFAULT_AMBIENT_SOUND_INTERVAL;
    MCAPI static float const DEFAULT_AMBIENT_SOUND_INTERVAL_RANGE;
    MCAPI static class Vec3 const LAVA_AABB_SHRINK_AMOUNT;
    MCAPI static float const LAVA_FLOW_STRENGTH_MULTIPLIER;
    MCAPI static int const MAX_BYTE_CHARGE_AMOUNT;
    MCAPI static std::string const RIDING_TAG;
    MCAPI static int const TOTAL_AIR_SUPPLY;
    MCAPI static class Vec3 const WATER_AABB_SHRINK_AMOUNT;
    MCAPI static float const WATER_FLOW_STRENGTH_MULTIPLIER;
    MCAPI static void _move(struct IActorMovementProxy&, class Vec3 const&);
    MCAPI static class Vec3 buildForward(struct IActorMovementProxy const&);
    MCAPI static bool canBeginOrContinueClimbingLadder(struct IActorMovementProxy const&);
    MCAPI static void checkEntityOnewayCollision(class BlockSource&, class BlockPos const&);
    MCAPI static class BlockPos getBlockPosCurrentlyStandingOn(struct IActorMovementProxy const&, struct IActorMovementProxy*);
    MCAPI static class Vec2 getInterpolatedRotation(class Vec2 const&, class Vec2 const&, float);
    MCAPI static class AABB getLiquidAABB(struct IActorMovementProxy const&, enum MaterialType);
    MCAPI static float getLiquidFlowStrength(enum MaterialType);
    MCAPI static bool getStatusFlag(class SynchedActorData const&, enum ActorFlags);
    MCAPI static class Vec3 getViewVector(struct IActorMovementProxy const&, float);
    MCAPI static class Vec3 getViewVector(class Vec2 const&, class Vec2 const&, float);
    MCAPI static bool hasSubBBIn(struct IActorMovementProxy const&, enum MaterialType);
    MCAPI static bool isFree(struct IActorMovementProxy&, class Vec3 const&, float);
    MCAPI static bool isImmersedInWater(struct IActorMovementProxy const&);
    MCAPI static bool isImmobile(struct IActorMovementProxy const&);
    MCAPI static bool isInScaffolding(struct IActorMovementProxy const&);
    MCAPI static bool isSitting(struct IActorMovementProxy const&);
    MCAPI static bool isStanding(struct IActorMovementProxy const&);
    MCAPI static void moveRelative(struct IActorMovementProxy&, float, float, float, float);
    MCAPI static bool onClimbableBlock(struct IActorMovementProxy const&);
    MCAPI static bool setStatusFlag(class SynchedActorData&, enum ActorFlags, bool);
    MCAPI static void testForCollidableMobs(struct IActorMovementProxy const&, class BlockSource&, class AABB const&, std::vector<class AABB>&);
    MCAPI static class Actor* tryGetFromComponent(class ActorOwnerComponent&, bool);
    MCAPI static class Actor const* tryGetFromComponent(class ActorOwnerComponent const&, bool);
    MCAPI static class Actor* tryGetFromEntity(class EntityContext&, bool);
    MCAPI static class Actor* tryGetFromEntity(class StackRefResultT<struct EntityRefTraits>, bool);

protected:
    MCAPI void _assignActorMovementProxy(class gsl::not_null<class std::shared_ptr<struct IActorMovementProxy> >);
    MCAPI bool _damageSensorComponentHurt(int&, int, class ActorDamageSource const&);
    MCAPI class ItemActor const* _drop(class ItemStack const&, bool);
    MCAPI class AABBShape& _getAABBShapeNonConst();
    MCAPI bool _isHeadInWater() const;
    MCAPI void _playMovementSound(bool);
    MCAPI void _refreshAABB();
    MCAPI void _setAABBDim(class Vec2 const&);
    MCAPI void _setArmorContainer(std::unique_ptr<class SimpleContainer>);
    MCAPI void _setHandContainer(std::unique_ptr<class SimpleContainer>);
    MCAPI void _setHeightOffset(float);
    MCAPI void _setNetherPortalData(class AutomaticID<class Dimension, int>, class AutomaticID<class Dimension, int>, int);
    MCAPI void _setPos(class Vec3 const&);
    MCAPI void _setPosPrev(class Vec3 const&);
    MCAPI void enableAutoSendPosRot(bool);
    MCAPI static int const PLAYER_HURT_EXPERIENCE_TIME;
    MCAPI static bool _isImmersedInWater(class StateVector const&, class BlockSource const&, class AABBShape const&);
    MCAPI static class Block const& getBlockWhenClimbing(struct IActorMovementProxy const&);

private:
    MCAPI void _addActorComponents();
    MCAPI void _initAliasProperties();
    MCAPI void _initializeLeashRopeSystem(class Actor*);
    MCAPI bool _isItemStackNetManagerEnabled() const;
    MCAPI void _managePassengers(class BlockSource&);
    MCAPI void _moveHitboxTo(class Vec3 const&);
    MCAPI void _sendLinkPacket(struct ActorLink const&) const;
    MCAPI void _serializeComponents(class CompoundTag&);
    MCAPI void _setupServerAnimationComponent();
    MCAPI void _spawnTreasureHuntingParticles();
    MCAPI bool _tryPlaceAt(class Vec3 const&, class AABB const&);
    MCAPI void _tryPlantWitherRose();
    MCAPI void _updateComposition(bool);
    MCAPI void _updateOwnerChunk();
    MCAPI static int const DAMAGE_NEARBY_MOBS_DURATION;
    MCAPI static float const DEFAULT_MAX_DISTANCE_OPTIMIZATION;
    MCAPI static unsigned __int64 const DEFAULT_MAX_TICK_DELAY_OPTIMIZATION;
    MCAPI static bool _containsSneakCollisionShapes(struct IActorMovementProxy&, class AABB const&);

};