// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "Json.hpp"
#include "PlayerCommandOrigin.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

class AutomationPlayerCommandOrigin : public PlayerCommandOrigin {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA

#ifndef DISABLE_CONSTRUCTOR_PREVENTION_AUTOMATIONPLAYERCOMMANDORIGIN
public:
    class AutomationPlayerCommandOrigin& operator=(class AutomationPlayerCommandOrigin const&) = delete;
    AutomationPlayerCommandOrigin(class AutomationPlayerCommandOrigin const&) = delete;
    AutomationPlayerCommandOrigin() = delete;
#endif

public:
    /*0*/ virtual ~AutomationPlayerCommandOrigin();
    /*1*/ virtual std::string const& getRequestId() const;
    /*2*/ virtual std::string getName() const;
    /*5*/ virtual class std::optional<class Vec2> getRotation() const;
    /*6*/ virtual class Level* getLevel() const;
    /*9*/ virtual enum CommandPermissionLevel getPermissionsLevel() const;
    /*10*/ virtual std::unique_ptr<class CommandOrigin> clone() const;
    /*13*/ virtual void __unk_vfn_13();
    /*14*/ virtual void __unk_vfn_14();
    /*17*/ virtual void __unk_vfn_17();
    /*18*/ virtual bool isSelectorExpansionAllowed() const;
    /*19*/ virtual class NetworkIdentifier const& getSourceId() const;
    /*21*/ virtual void __unk_vfn_21();
    /*23*/ virtual enum CommandOriginType getOriginType() const;
    /*24*/ virtual struct CommandOriginData toCommandOriginData() const;
    /*25*/ virtual void __unk_vfn_25();
    /*26*/ virtual void handleCommandOutputCallback(class Json::Value&&) const;
    /*27*/ virtual void updateValues();
    /*29*/ virtual class CompoundTag serialize() const;
    /*30*/ virtual bool isValid() const;
    /*31*/ virtual void _setUUID(class mce::UUID const&);
    /*
    inline bool hasChatPerms() const{
        bool (AutomationPlayerCommandOrigin::*rv)() const;
        *((void**)&rv) = dlsym("?hasChatPerms@AutomationPlayerCommandOrigin@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline bool hasTellPerms() const{
        bool (AutomationPlayerCommandOrigin::*rv)() const;
        *((void**)&rv) = dlsym("?hasTellPerms@AutomationPlayerCommandOrigin@@UEBA_NXZ");
        return (this->*rv)();
    }
    */
    MCAPI AutomationPlayerCommandOrigin(std::string const&, class Player&);
    MCAPI AutomationPlayerCommandOrigin(struct ActorUniqueID, class Level&, std::string const&, enum CommandPermissionLevel, class NetworkIdentifier const&);

protected:

private:

};