// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here
class Actor;

#undef BEFORE_EXTRA

class ActorDamageSource {

#define AFTER_EXTRA
// Add Member There
public:
    LIAPI Actor* getEntity();

#undef AFTER_EXTRA

#ifndef DISABLE_CONSTRUCTOR_PREVENTION_ACTORDAMAGESOURCE
public:
    class ActorDamageSource& operator=(class ActorDamageSource const&) = delete;
    ActorDamageSource(class ActorDamageSource const&) = delete;
    ActorDamageSource() = delete;
#endif

public:
    /*0*/ virtual ~ActorDamageSource();
    /*1*/ virtual void __unk_vfn_1();
    /*2*/ virtual void __unk_vfn_2();
    /*3*/ virtual void __unk_vfn_3();
    /*4*/ virtual bool isFire() const;
    /*5*/ virtual struct std::pair<std::string, std::vector<std::string> > getDeathMessage(std::string, class Actor*) const;
    /*6*/ virtual void __unk_vfn_6();
    /*7*/ virtual void __unk_vfn_7();
    /*8*/ virtual void __unk_vfn_8();
    /*9*/ virtual void __unk_vfn_9();
    /*10*/ virtual enum ActorCategory getEntityCategories() const;
    /*11*/ virtual void __unk_vfn_11();
    /*12*/ virtual void __unk_vfn_12();
    /*13*/ virtual struct ActorUniqueID getDamagingEntityUniqueID() const;
    /*14*/ virtual enum ActorType getDamagingEntityType() const;
    /*15*/ virtual enum ActorCategory getDamagingEntityCategories() const;
    /*16*/ virtual std::unique_ptr<class ActorDamageSource> clone() const;
    /*
    inline bool getDamagingEntityIsCreative() const{
        bool (ActorDamageSource::*rv)() const;
        *((void**)&rv) = dlsym("?getDamagingEntityIsCreative@ActorDamageSource@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline bool getIsCreative() const{
        bool (ActorDamageSource::*rv)() const;
        *((void**)&rv) = dlsym("?getIsCreative@ActorDamageSource@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline bool isChildEntitySource() const{
        bool (ActorDamageSource::*rv)() const;
        *((void**)&rv) = dlsym("?isChildEntitySource@ActorDamageSource@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline bool getIsWorldBuilder() const{
        bool (ActorDamageSource::*rv)() const;
        *((void**)&rv) = dlsym("?getIsWorldBuilder@ActorDamageSource@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline bool getDamagingEntityIsWorldBuilder() const{
        bool (ActorDamageSource::*rv)() const;
        *((void**)&rv) = dlsym("?getDamagingEntityIsWorldBuilder@ActorDamageSource@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline bool isBlockSource() const{
        bool (ActorDamageSource::*rv)() const;
        *((void**)&rv) = dlsym("?isBlockSource@ActorDamageSource@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline bool isEntitySource() const{
        bool (ActorDamageSource::*rv)() const;
        *((void**)&rv) = dlsym("?isEntitySource@ActorDamageSource@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline enum ActorType getEntityType() const{
        enum ActorType (ActorDamageSource::*rv)() const;
        *((void**)&rv) = dlsym("?getEntityType@ActorDamageSource@@UEBA?AW4ActorType@@XZ");
        return (this->*rv)();
    }
    inline struct ActorUniqueID getEntityUniqueID() const{
        struct ActorUniqueID (ActorDamageSource::*rv)() const;
        *((void**)&rv) = dlsym("?getEntityUniqueID@ActorDamageSource@@UEBA?AUActorUniqueID@@XZ");
        return (this->*rv)();
    }
    */
    MCAPI ActorDamageSource(enum ActorDamageCause);
    MCAPI enum ActorDamageCause getCause() const;
    MCAPI void setCause(enum ActorDamageCause);
    MCAPI static std::vector<struct std::pair<std::string, enum ActorDamageCause>> generateDamageCauseCommandEnum();
    MCAPI static enum ActorDamageCause lookupCause(std::string const&);
    MCAPI static std::string const& lookupCauseName(enum ActorDamageCause);

protected:

private:

};