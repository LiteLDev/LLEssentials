// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

class ContainerScreenValidatorBase {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA

#ifndef DISABLE_CONSTRUCTOR_PREVENTION_CONTAINERSCREENVALIDATORBASE
public:
    class ContainerScreenValidatorBase& operator=(class ContainerScreenValidatorBase const&) = delete;
    ContainerScreenValidatorBase(class ContainerScreenValidatorBase const&) = delete;
#endif

public:
    /*0*/ virtual ~ContainerScreenValidatorBase();
    /*
    inline void clear(){
        void (ContainerScreenValidatorBase::*rv)();
        *((void**)&rv) = dlsym("?clear@ContainerScreenValidatorBase@@UEAAXXZ");
        return (this->*rv)();
    }
    inline void onItemRemoved(int a0, class ItemStack const& a1){
        void (ContainerScreenValidatorBase::*rv)(int, class ItemStack const&);
        *((void**)&rv) = dlsym("?onItemRemoved@ContainerScreenValidatorBase@@UEAAXHAEBVItemStack@@@Z");
        return (this->*rv)(std::forward<int>(a0), std::forward<class ItemStack const&>(a1));
    }
    inline void commitResults(class ContainerScreenContext const& a0){
        void (ContainerScreenValidatorBase::*rv)(class ContainerScreenContext const&);
        *((void**)&rv) = dlsym("?commitResults@ContainerScreenValidatorBase@@UEAAXAEBVContainerScreenContext@@@Z");
        return (this->*rv)(std::forward<class ContainerScreenContext const&>(a0));
    }
    inline  ~ContainerScreenValidatorBase(){
         (ContainerScreenValidatorBase::*rv)();
        *((void**)&rv) = dlsym("??1ContainerScreenValidatorBase@@UEAA@XZ");
        return (this->*rv)();
    }
    */
    MCAPI ContainerScreenValidatorBase();
    MCAPI bool isValidContainerForScreen(enum ContainerEnumName) const;

protected:

private:

};