// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

class OverworldGenerator {

#define AFTER_EXTRA
// Add Member There
public:
struct ThreadData {
    ThreadData() = delete;
    ThreadData(ThreadData const&) = delete;
    ThreadData(ThreadData const&&) = delete;
};

#undef AFTER_EXTRA

#ifndef DISABLE_CONSTRUCTOR_PREVENTION_OVERWORLDGENERATOR
public:
    class OverworldGenerator& operator=(class OverworldGenerator const&) = delete;
    OverworldGenerator(class OverworldGenerator const&) = delete;
    OverworldGenerator() = delete;
#endif

public:
    /*
    inline  ~OverworldGenerator(){
         (OverworldGenerator::*rv)();
        *((void**)&rv) = dlsym("??1OverworldGenerator@@UEAA@XZ");
        return (this->*rv)();
    }
    inline void addHardcodedSpawnAreas(class LevelChunk& a0){
        void (OverworldGenerator::*rv)(class LevelChunk&);
        *((void**)&rv) = dlsym("?addHardcodedSpawnAreas@OverworldGenerator@@UEAAXAEAVLevelChunk@@@Z");
        return (this->*rv)(std::forward<class LevelChunk&>(a0));
    }
    inline class ChunkLocalNoiseCache createNoiseCache(class ChunkPos a0) const{
        class ChunkLocalNoiseCache (OverworldGenerator::*rv)(class ChunkPos) const;
        *((void**)&rv) = dlsym("?createNoiseCache@OverworldGenerator@@MEBA?AVChunkLocalNoiseCache@@VChunkPos@@@Z");
        return (this->*rv)(std::forward<class ChunkPos>(a0));
    }
    inline class WorldGenCache createWorldGenCache(class ChunkPos a0) const{
        class WorldGenCache (OverworldGenerator::*rv)(class ChunkPos) const;
        *((void**)&rv) = dlsym("?createWorldGenCache@OverworldGenerator@@MEBA?AVWorldGenCache@@VChunkPos@@@Z");
        return (this->*rv)(std::forward<class ChunkPos>(a0));
    }
    inline void debugRender(){
        void (OverworldGenerator::*rv)();
        *((void**)&rv) = dlsym("?debugRender@OverworldGenerator@@UEAAXXZ");
        return (this->*rv)();
    }
    inline void decorateWorldGenLoadChunk(class Biome& a0, class LevelChunk& a1, class BlockVolumeTarget& a2, class Random& a3, class ChunkPos const& a4) const{
        void (OverworldGenerator::*rv)(class Biome&, class LevelChunk&, class BlockVolumeTarget&, class Random&, class ChunkPos const&) const;
        *((void**)&rv) = dlsym("?decorateWorldGenLoadChunk@OverworldGenerator@@MEBAXAEAVBiome@@AEAVLevelChunk@@AEAVBlockVolumeTarget@@AEAVRandom@@AEBVChunkPos@@@Z");
        return (this->*rv)(std::forward<class Biome&>(a0), std::forward<class LevelChunk&>(a1), std::forward<class BlockVolumeTarget&>(a2), std::forward<class Random&>(a3), std::forward<class ChunkPos const&>(a4));
    }
    inline bool findNearestFeature(enum StructureFeatureType a0, class BlockPos const& a1, class BlockPos& a2, bool a3){
        bool (OverworldGenerator::*rv)(enum StructureFeatureType, class BlockPos const&, class BlockPos&, bool);
        *((void**)&rv) = dlsym("?findNearestFeature@OverworldGenerator@@UEAA_NW4StructureFeatureType@@AEBVBlockPos@@AEAV3@_N@Z");
        return (this->*rv)(std::forward<enum StructureFeatureType>(a0), std::forward<class BlockPos const&>(a1), std::forward<class BlockPos&>(a2), std::forward<bool>(a3));
    }
    inline std::unique_ptr<class Aquifer> tryMakeAquifer(class ChunkPos const& a0, class SurfaceLevelCache const& a1, short a2, short a3, short a4) const{
        std::unique_ptr<class Aquifer> (OverworldGenerator::*rv)(class ChunkPos const&, class SurfaceLevelCache const&, short, short, short) const;
        *((void**)&rv) = dlsym("?tryMakeAquifer@OverworldGenerator@@MEBA?AV?$unique_ptr@VAquifer@@U?$default_delete@VAquifer@@@std@@@std@@AEBVChunkPos@@AEBVSurfaceLevelCache@@FFF@Z");
        return (this->*rv)(std::forward<class ChunkPos const&>(a0), std::forward<class SurfaceLevelCache const&>(a1), std::forward<short>(a2), std::forward<short>(a3), std::forward<short>(a4));
    }
    inline void garbageCollectBlueprints(class buffer_span<class ChunkPos> a0){
        void (OverworldGenerator::*rv)(class buffer_span<class ChunkPos>);
        *((void**)&rv) = dlsym("?garbageCollectBlueprints@OverworldGenerator@@UEAAXV?$buffer_span@VChunkPos@@@@@Z");
        return (this->*rv)(std::forward<class buffer_span<class ChunkPos>>(a0));
    }
    inline class BiomeArea getBiomeArea(class BoundingBox const& a0, unsigned int a1) const{
        class BiomeArea (OverworldGenerator::*rv)(class BoundingBox const&, unsigned int) const;
        *((void**)&rv) = dlsym("?getBiomeArea@OverworldGenerator@@UEBA?AVBiomeArea@@AEBVBoundingBox@@I@Z");
        return (this->*rv)(std::forward<class BoundingBox const&>(a0), std::forward<unsigned int>(a1));
    }
    inline struct WorldGenerator::BlockVolumeDimensions getBlockVolumeDimensions() const{
        struct WorldGenerator::BlockVolumeDimensions (OverworldGenerator::*rv)() const;
        *((void**)&rv) = dlsym("?getBlockVolumeDimensions@OverworldGenerator@@UEBA?AUBlockVolumeDimensions@WorldGenerator@@XZ");
        return (this->*rv)();
    }
    inline enum StructureFeatureType getFeatureTypeAt(class BlockPos const& a0){
        enum StructureFeatureType (OverworldGenerator::*rv)(class BlockPos const&);
        *((void**)&rv) = dlsym("?getFeatureTypeAt@OverworldGenerator@@UEAA?AW4StructureFeatureType@@AEBVBlockPos@@@Z");
        return (this->*rv)(std::forward<class BlockPos const&>(a0));
    }
    inline class std::optional<short> getPreliminarySurfaceLevel(class DividedPos2d<4> a0) const{
        class std::optional<short> (OverworldGenerator::*rv)(class DividedPos2d<4>) const;
        *((void**)&rv) = dlsym("?getPreliminarySurfaceLevel@OverworldGenerator@@UEBA?AV?$optional@F@std@@V?$DividedPos2d@$03@@@Z");
        return (this->*rv)(std::forward<class DividedPos2d<4>>(a0));
    }
    inline class PerlinSimplexNoise const& getSurfaceNoise(){
        class PerlinSimplexNoise const& (OverworldGenerator::*rv)();
        *((void**)&rv) = dlsym("?getSurfaceNoise@OverworldGenerator@@MEAAAEBVPerlinSimplexNoise@@XZ");
        return (this->*rv)();
    }
    inline void loadChunk(class LevelChunk& a0, bool a1){
        void (OverworldGenerator::*rv)(class LevelChunk&, bool);
        *((void**)&rv) = dlsym("?loadChunk@OverworldGenerator@@UEAAXAEAVLevelChunk@@_N@Z");
        return (this->*rv)(std::forward<class LevelChunk&>(a0), std::forward<bool>(a1));
    }
    inline bool postProcess(class ChunkViewSource& a0){
        bool (OverworldGenerator::*rv)(class ChunkViewSource&);
        *((void**)&rv) = dlsym("?postProcess@OverworldGenerator@@UEAA_NAEAVChunkViewSource@@@Z");
        return (this->*rv)(std::forward<class ChunkViewSource&>(a0));
    }
    inline void postProcessMobsAt(class BlockSource& a0, int a1, int a2, class Random& a3){
        void (OverworldGenerator::*rv)(class BlockSource&, int, int, class Random&);
        *((void**)&rv) = dlsym("?postProcessMobsAt@OverworldGenerator@@UEAAXAEAVBlockSource@@HHAEAVRandom@@@Z");
        return (this->*rv)(std::forward<class BlockSource&>(a0), std::forward<int>(a1), std::forward<int>(a2), std::forward<class Random&>(a3));
    }
    inline void prepareAndComputeHeights(class BlockVolume& a0, class ChunkPos const& a1, std::vector<short>& a2, bool a3, int a4){
        void (OverworldGenerator::*rv)(class BlockVolume&, class ChunkPos const&, std::vector<short>&, bool, int);
        *((void**)&rv) = dlsym("?prepareAndComputeHeights@OverworldGenerator@@UEAAXAEAVBlockVolume@@AEBVChunkPos@@AEAV?$vector@FV?$allocator@F@std@@@std@@_NH@Z");
        return (this->*rv)(std::forward<class BlockVolume&>(a0), std::forward<class ChunkPos const&>(a1), std::forward<std::vector<short>&>(a2), std::forward<bool>(a3), std::forward<int>(a4));
    }
    inline void prepareHeights(class BlockVolume& a0, class ChunkPos const& a1, bool a2){
        void (OverworldGenerator::*rv)(class BlockVolume&, class ChunkPos const&, bool);
        *((void**)&rv) = dlsym("?prepareHeights@OverworldGenerator@@UEAAXAEAVBlockVolume@@AEBVChunkPos@@_N@Z");
        return (this->*rv)(std::forward<class BlockVolume&>(a0), std::forward<class ChunkPos const&>(a1), std::forward<bool>(a2));
    }
    */
    MCAPI OverworldGenerator(class Dimension&, unsigned int, bool);
    MCAPI void buildSurfaces(struct OverworldGenerator::ThreadData&, class BlockVolume&, class LevelChunk&, class ChunkPos const&, class SurfaceLevelCache const&);

protected:
    MCAPI class std::shared_ptr<class OperationNode<class Biome* , class Pos2d> > makeCommonNodeGraph(class LevelData const&, class BiomeRegistry const&) const;

private:
    MCAPI void _prepareStructureBlueprints(class ChunkPos const&, class BiomeSource const&, class IPreliminarySurfaceProvider const&);

};