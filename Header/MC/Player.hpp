// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "Actor.hpp"
#include "Mob.hpp"

#define BEFORE_EXTRA
// Add include headers & pre-declares
    class ServerPlayer;
    class Player;
    class NetworkIdentifier;
    class UserEntityIdentifierComponent;
    class Certificate;
    class Container;
    class CompoundTag;
    #include "ScorePacketInfo.hpp"
    #include "DataItem.hpp"
#undef BEFORE_EXTRA

class Player : public Mob {

#define AFTER_EXTRA
// Add new members to class
public:
    enum PositionMode : char{
        NORMAL,
        RESPAWN,
        TELEPORT,
        HEAD_ROTATION,
    };

    LIAPI std::string getName();
    LIAPI std::string getRealName();
    LIAPI std::string getUuid();
    LIAPI unsigned char getClientSubId();
    LIAPI string getDeviceTypeName();
    LIAPI int getAvgPing();
    LIAPI int getLastPing();
    LIAPI std::string getIP();
    LIAPI string getLanguageCode();
    LIAPI string getServerAddress();
    LIAPI NetworkIdentifier* getNetworkIdentifier();
    LIAPI Certificate* getCertificate();
    LIAPI Container* getEnderChestContainer();
    LIAPI std::pair<BlockPos, int> getRespawnPosition();
    LIAPI float getAvgPacketLoss();
    LIAPI string getClientId();
    LIAPI int getDeviceType();
    LIAPI bool isOP();

    
    LIAPI bool sendText(string text, TextType type = TextType::RAW);
    template <typename... Args>
    bool sendFormattedText(string text, const Args&... args)
    {
        if constexpr (0 == sizeof...(args))
        {
            // Avoid fmt if only one argument
            return sendText(text);
        }
        else
            return sendText(fmt::format(text, args...));
    }

    LIAPI bool kick(const string& msg);
    LIAPI bool crashClient();
    LIAPI bool talkAs(const string& msg);
    LIAPI bool giveItem(ItemStack* item); 
    LIAPI int clearItem(string typeName);
    LIAPI bool runcmd(const string& cmd);
    LIAPI bool transferServer(const string& address, unsigned short port);
    LIAPI bool setSidebar(const std::string& title, const std::vector<std::pair<std::string, int>>& data, ObjectiveSortOrder sortOrder);
    LIAPI bool removeSidebar();
    LIAPI std::unique_ptr<CompoundTag> getNbt();
    LIAPI bool setNbt(CompoundTag* nbt);

    LIAPI int getScore(const string& key);
    LIAPI bool setScore(const string& key, int value);
    LIAPI bool addScore(const string& key, int value);
    LIAPI bool reduceScore(const string& key, int value);
    LIAPI bool deleteScore(const string& key);

    //Packet
    LIAPI bool sendTextPacket(string text, TextType Type = TextType::RAW) const;
    LIAPI bool sendTitlePacket(string text, TitleType Type, int FadeInDuration, int RemainDuration, int FadeOutDuration) const;
    LIAPI bool sendNotePacket(unsigned int tone);
    LIAPI bool sendSpawnParticleEffectPacket(Vec3 spawnPos, int dimid, string ParticleName, int64_t EntityUniqueID = -1) const;
    /*bad*/ LIAPI bool sendPlaySoundPacket(string SoundName, Vec3 Position, float Volume, float Pitch) const;
    LIAPI bool sendAddItemEntityPacket(unsigned long long runtimeID, class Item const& item, int stackSize, short aux, Vec3 pos, vector<std::unique_ptr<DataItem>> dataItems = {}) const;
    LIAPI bool sendAddEntityPacket(unsigned long long runtimeID, string entityType, Vec3 pos, Vec2 rotation, float headYaw, vector<std::unique_ptr<DataItem>> dataItems = {});
    LIAPI bool sendUpdateBlockPacket(int x, int y, int z, unsigned int runtimeId, UpdateBlockFlags flag = UpdateBlockFlags::BlockUpdateAll, UpdateBlockLayer layer = UpdateBlockLayer::UpdateBlockDefault);
    LIAPI bool sendUpdateBlockPacket(int x, int y, int z, const Block& block, UpdateBlockFlags flag = UpdateBlockFlags::BlockUpdateAll, UpdateBlockLayer layer = UpdateBlockLayer::UpdateBlockDefault);
    LIAPI bool sendTransferPacket(const string& address, short port) const;
    LIAPI bool sendSetDisplayObjectivePacket(const string& title, const string& name, char sortOrder) const;
    LIAPI bool sendSetScorePacket(char type, const vector<ScorePacketInfo>& data);
    LIAPI bool sendBossEventPacket(BossEvent type, string name, float percent, BossEventColour colour, int overlay = 0);
    LIAPI bool sendCommandRequestPacket(const string& cmd);
    LIAPI bool sendTextTalkPacket(const string& msg);

    LIAPI bool sendRawFormPacket(unsigned formId, const string& data) const;
    LIAPI bool sendSimpleFormPacket(const string& title, const string& content, const vector<string>& buttons, const std::vector<std::string>& images, std::function<void(int)> callback) const;
    LIAPI bool sendModalFormPacket(const string& title, const string& content, const string& button1, const string& button2, std::function<void(bool)> callback);
    LIAPI bool sendCustomFormPacket(const std::string& data, std::function<void(string)> callback);

    LIAPI static bool isValid(Player* player);

    //For compatibility
    inline string getDeviceName() { return getDeviceTypeName(); }

#undef AFTER_EXTRA

#ifndef DISABLE_CONSTRUCTOR_PREVENTION_PLAYER
public:
    class Player& operator=(class Player const&) = delete;
    Player(class Player const&) = delete;
    Player() = delete;
#endif

public:
    /*8*/ virtual void reloadHardcoded(enum Actor::InitializationMethod, class VariantParameterList const&);
    /*10*/ virtual void initializeComponents(enum Actor::InitializationMethod, class VariantParameterList const&);
    /*12*/ virtual void _serverInitItemStackIds();
    /*14*/ virtual ~Player();
    /*18*/ virtual void remove();
    /*20*/ virtual bool isRuntimePredictedMovementEnabled() const;
    /*25*/ virtual class Vec3 getAttachPos(enum ActorLocation, float) const;
    /*28*/ virtual void move(class Vec3 const&);
    /*29*/ virtual void move(struct IActorMovementProxy&, class Vec3 const&) const;
    /*41*/ virtual void __unk_vfn_41();
    /*43*/ virtual void teleportTo(class Vec3 const&, bool, int, int);
    /*47*/ virtual std::unique_ptr<class AddActorBasePacket> tryCreateAddActorPacket();
    /*48*/ virtual void normalTick();
    /*50*/ virtual void vehicleTick();
    /*52*/ virtual float getRidingHeight();
    /*61*/ virtual void __unk_vfn_61();
    /*65*/ virtual std::string getFormattedNameTag() const;
    /*68*/ virtual void __unk_vfn_68();
    /*78*/ virtual float getCameraOffset() const;
    /*82*/ virtual void __unk_vfn_82();
    /*87*/ virtual void __unk_vfn_87();
    /*88*/ virtual void playerTouch(class Player&);
    /*91*/ virtual bool isImmobile() const;
    /*94*/ virtual void __unk_vfn_94();
    /*95*/ virtual bool isSleeping() const;
    /*96*/ virtual void setSleeping(bool);
    /*97*/ virtual void __unk_vfn_97();
    /*99*/ virtual bool isBlocking() const;
    /*100*/ virtual bool isDamageBlocked(class ActorDamageSource const&) const;
    /*104*/ virtual void __unk_vfn_104();
    /*106*/ virtual void __unk_vfn_106();
    /*107*/ virtual void __unk_vfn_107();
    /*108*/ virtual void __unk_vfn_108();
    /*112*/ virtual class Actor* findAttackTarget();
    /*113*/ virtual bool isValidTarget(class Actor*) const;
    /*114*/ virtual bool attack(class Actor&, enum ActorDamageCause const&);
    /*116*/ virtual void adjustDamageAmount(int&) const;
    /*120*/ virtual void onTame();
    /*121*/ virtual void onFailedTame();
    /*128*/ virtual bool isJumping() const;
    /*130*/ virtual void vehicleLanded(class Vec3 const&, class Vec3 const&);
    /*134*/ virtual bool isInvulnerableTo(class ActorDamageSource const&) const;
    /*136*/ virtual void actuallyHurt(int, class ActorDamageSource const&, bool);
    /*140*/ virtual void onBounceStarted(class BlockPos const&, class Block const&);
    /*141*/ virtual void feed(int);
    /*142*/ virtual void handleEntityEvent(enum ActorEvent, int);
    /*144*/ virtual class HashedString const& getActorRendererId() const;
    /*152*/ virtual void awardKillScore(class Actor&, int);
    /*153*/ virtual void setArmor(enum ArmorSlot, class ItemStack const&);
    /*161*/ virtual class ItemStack const& getCarriedItem() const;
    /*162*/ virtual void setCarriedItem(class ItemStack const&);
    /*163*/ virtual void setOffhandSlot(class ItemStack const&);
    /*164*/ virtual class ItemStack const& getEquippedTotem() const;
    /*165*/ virtual bool consumeTotem();
    /*170*/ virtual enum ActorType getEntityTypeId() const;
    /*172*/ virtual struct ActorUniqueID getSourceUniqueID() const;
    /*174*/ virtual bool canFreeze() const;
    /*178*/ virtual int getPortalCooldown() const;
    /*179*/ virtual int getPortalWaitTime() const;
    /*181*/ virtual bool canChangeDimensions() const;
    /*182*/ virtual void __unk_vfn_182();
    /*184*/ virtual struct ActorUniqueID getControllingPlayer() const;
    /*191*/ virtual void onSynchedDataUpdate(int);
    /*192*/ virtual bool canAddPassenger(class Actor&) const;
    /*193*/ virtual bool canPickupItem(class ItemStack const&) const;
    /*194*/ virtual bool canBePulledIntoVehicle() const;
    /*196*/ virtual void __unk_vfn_196();
    /*198*/ virtual void sendMotionPacketIfNeeded();
    /*199*/ virtual bool canSynchronizeNewEntity() const;
    /*201*/ virtual void startSwimming();
    /*202*/ virtual void stopSwimming();
    /*204*/ virtual enum CommandPermissionLevel getCommandPermissionLevel() const;
    /*217*/ virtual class AnimationComponent& getAnimationComponent();
    /*220*/ virtual void useItem(class ItemStackBase&, enum ItemUseMethod, bool);
    /*221*/ virtual void __unk_vfn_221();
    /*222*/ virtual void __unk_vfn_222();
    /*224*/ virtual float getMapDecorationRotation() const;
    /*227*/ virtual bool isWorldBuilder() const;
    /*228*/ virtual bool isCreative() const;
    /*229*/ virtual bool isAdventure() const;
    /*230*/ virtual bool add(class ItemStack&);
    /*231*/ virtual bool drop(class ItemStack const&, bool);
    /*233*/ virtual bool canDestroyBlock(class Block const&) const;
    /*234*/ virtual void setAuxValue(int);
    /*235*/ virtual void setSize(float, float);
    /*239*/ virtual void startSpinAttack();
    /*240*/ virtual void stopSpinAttack();
    /*242*/ virtual void __unk_vfn_242();
    /*245*/ virtual void __unk_vfn_245();
    /*247*/ virtual void die(class ActorDamageSource const&);
    /*248*/ virtual bool shouldDropDeathLoot() const;
    /*257*/ virtual void __unk_vfn_257();
    /*258*/ virtual bool _hurt(class ActorDamageSource const&, int, bool, bool);
    /*261*/ virtual void readAdditionalSaveData(class CompoundTag const&, class DataLoadHelper&);
    /*262*/ virtual void addAdditionalSaveData(class CompoundTag&);
    /*265*/ virtual void __unk_vfn_265();
    /*273*/ virtual void _onSizeUpdated();
    /*274*/ virtual void __unk_vfn_274();
    /*276*/ virtual void spawnAnim();
    /*281*/ virtual float getSpeed() const;
    /*282*/ virtual void setSpeed(float);
    /*287*/ virtual void travel(float, float, float);
    /*288*/ virtual void travel(struct IMobMovementProxy&, float, float, float) const;
    /*290*/ virtual void aiStep();
    /*291*/ virtual void aiStep(struct IMobMovementProxy&) const;
    /*298*/ virtual int getItemUseDuration() const;
    /*299*/ virtual float getItemUseStartupProgress() const;
    /*300*/ virtual float getItemUseIntervalProgress() const;
    /*303*/ virtual void __unk_vfn_303();
    /*305*/ virtual bool isAlliedTo(class Mob*);
    /*307*/ virtual void __unk_vfn_307();
    /*316*/ virtual void sendArmorDamage(class std::bitset<4> const&);
    /*322*/ virtual std::vector<class ItemStack const* > getAllHand() const;
    /*323*/ virtual std::vector<class ItemStack const* > getAllEquipment() const;
    /*325*/ virtual void dropEquipmentOnDeath(class ActorDamageSource const&, int);
    /*326*/ virtual void dropEquipmentOnDeath();
    /*327*/ virtual void clearVanishEnchantedItemsOnDeath();
    /*328*/ virtual void sendInventory(bool);
    /*331*/ virtual void onBorn(class Actor&, class Actor&);
    /*336*/ virtual float _getWalkTargetValue(class BlockPos const&);
    /*337*/ virtual bool canExistWhenDisallowMob() const;
    /*338*/ virtual void __unk_vfn_338();
    /*343*/ virtual std::unique_ptr<class BodyControl> initBodyControl();
    /*344*/ virtual void jumpFromGround();
    /*345*/ virtual void jumpFromGround(struct IMobMovementProxy&) const;
    /*346*/ virtual void updateAi();
    /*348*/ virtual void _serverAiMobStep();
    /*353*/ virtual void updateGliding();
    /*354*/ virtual void __unk_vfn_354();
    /*356*/ virtual void prepareRegion(class ChunkSource&);
    /*357*/ virtual void destroyRegion();
    /*358*/ virtual void suspendRegion();
    /*359*/ virtual void resendAllChunks();
    /*360*/ virtual void _fireWillChangeDimension();
    /*361*/ virtual void _fireDimensionChanged();
    /*362*/ virtual void changeDimensionWithCredits(class AutomaticID<class Dimension, int>);
    /*363*/ virtual void tickWorld(struct Tick const&);
    /*364*/ virtual void __unk_vfn_364() = 0;
    /*365*/ virtual std::vector<class ChunkPos> const& getTickingOffsets() const;
    /*366*/ virtual void moveView();
    /*367*/ virtual void setName(std::string const&);
    /*368*/ virtual void checkMovementStats(class Vec3 const&);
    /*369*/ virtual void __unk_vfn_369();
    /*370*/ virtual void __unk_vfn_370();
    /*371*/ virtual void respawn();
    /*372*/ virtual void __unk_vfn_372();
    /*373*/ virtual void resetPos(bool);
    /*374*/ virtual void __unk_vfn_374();
    /*375*/ virtual bool hasResource(int);
    /*376*/ virtual void completeUsingItem();
    /*377*/ virtual void setPermissions(enum CommandPermissionLevel);
    /*378*/ virtual void startDestroying();
    /*379*/ virtual void stopDestroying();
    /*380*/ virtual void __unk_vfn_380();
    /*381*/ virtual void __unk_vfn_381();
    /*382*/ virtual void openTrading(struct ActorUniqueID const&, bool);
    /*383*/ virtual bool canOpenContainerScreen();
    /*384*/ virtual void __unk_vfn_384();
    /*385*/ virtual void __unk_vfn_385();
    /*386*/ virtual void openInventory();
    /*387*/ virtual void __unk_vfn_387();
    /*388*/ virtual void __unk_vfn_388();
    /*389*/ virtual void displayTextObjectMessage(class TextObjectRoot const&, std::string const&, std::string const&);
    /*390*/ virtual void displayTextObjectWhisperMessage(class ResolvedTextObject const&, std::string const&, std::string const&);
    /*391*/ virtual void displayWhisperMessage(std::string const&, std::string const&, std::string const&, std::string const&);
    /*392*/ virtual enum BedSleepingResult startSleepInBed(class BlockPos const&);
    /*393*/ virtual void stopSleepInBed(bool, bool);
    /*394*/ virtual bool canStartSleepInBed();
    /*395*/ virtual int getSleepTimer() const;
    /*396*/ virtual int getPreviousTickSleepTimer() const;
    /*397*/ virtual void __unk_vfn_397();
    /*398*/ virtual void __unk_vfn_398();
    /*399*/ virtual bool isHostingPlayer() const;
    /*400*/ virtual bool isLoading() const;
    /*401*/ virtual bool isPlayerInitialized() const;
    /*402*/ virtual void __unk_vfn_402();
    /*403*/ virtual void registerTrackedBoss(struct ActorUniqueID);
    /*404*/ virtual void unRegisterTrackedBoss(struct ActorUniqueID);
    /*405*/ virtual void setPlayerGameType(enum GameType);
    /*406*/ virtual void initHUDContainerManager();
    /*407*/ virtual void _crit(class Actor&);
    /*408*/ virtual class IMinecraftEventing* getEventing() const;
    /*409*/ virtual void __unk_vfn_409();
    /*410*/ virtual void sendEventPacket(class EventPacket&) const;
    /*411*/ virtual void addExperience(int);
    /*412*/ virtual void addLevels(int);
    /*413*/ virtual void setContainerData(class IContainerManager&, int, int) = 0;
    /*414*/ virtual void slotChanged(class IContainerManager&, class Container&, int, class ItemStack const&, class ItemStack const&, bool) = 0;
    /*415*/ virtual void inventoryChanged(class Container&, int, class ItemStack const&, class ItemStack const&, bool);
    /*416*/ virtual void refreshContainer(class IContainerManager&) = 0;
    /*417*/ virtual void deleteContainerManager();
    /*418*/ virtual void setFieldOfViewModifier(float);
    /*419*/ virtual bool is2DPositionRelevant(class AutomaticID<class Dimension, int>, class BlockPos const&);
    /*420*/ virtual bool isActorRelevant(class Actor const&);
    /*421*/ virtual bool isTeacher() const = 0;
    /*422*/ virtual void onSuspension();
    /*423*/ virtual void onLinkedSlotsChanged();
    /*424*/ virtual void startCooldown(class Item const*, bool);
    /*425*/ virtual int getItemCooldownLeft(class HashedString const&) const;
    /*426*/ virtual int getItemCooldownLeft(unsigned __int64) const;
    /*427*/ virtual int getMaxItemCooldownLeft() const;
    /*428*/ virtual bool isItemInCooldown(class HashedString const&) const;
    /*429*/ virtual void sendInventoryTransaction(class InventoryTransaction const&) const = 0;
    /*430*/ virtual void sendComplexInventoryTransaction(std::unique_ptr<class ComplexInventoryTransaction>) const = 0;
    /*431*/ virtual void sendNetworkPacket(class Packet&) const;
    /*432*/ virtual class PlayerEventCoordinator& getPlayerEventCoordinator() = 0;
    /*433*/ virtual class MoveInputHandler* getMoveInputHandler() = 0;
    /*434*/ virtual enum InputMode getInputMode() const = 0;
    /*435*/ virtual enum ClientPlayMode getPlayMode() const = 0;
    /*436*/ virtual void reportMovementTelemetry(enum MovementEventType);
    /*437*/ virtual void __unk_vfn_437();
    /*438*/ virtual std::string getXuid() const;
    /*439*/ virtual struct PlayerMovementSettings const& getMovementSettings() const;
    /*440*/ virtual void onMovePlayerPacketNormal(class Vec3 const&, class Vec2 const&, float);
    /*441*/ virtual class std::shared_ptr<class ChunkViewSource> _createChunkSource(class ChunkSource&);
    /*
    inline enum StructureFeatureType getCurrentStructureFeature() const{
        enum StructureFeatureType (Player::*rv)() const;
        *((void**)&rv) = dlsym("?getCurrentStructureFeature@Player@@UEBA?AW4StructureFeatureType@@XZ");
        return (this->*rv)();
    }
    inline bool isInTrialMode(){
        bool (Player::*rv)();
        *((void**)&rv) = dlsym("?isInTrialMode@Player@@UEAA_NXZ");
        return (this->*rv)();
    }
    inline bool useNewAi() const{
        bool (Player::*rv)() const;
        *((void**)&rv) = dlsym("?useNewAi@Player@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline bool isSimulated() const{
        bool (Player::*rv)() const;
        *((void**)&rv) = dlsym("?isSimulated@Player@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline bool isLocalPlayer() const{
        bool (Player::*rv)() const;
        *((void**)&rv) = dlsym("?isLocalPlayer@Player@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline unsigned int getUserId() const{
        unsigned int (Player::*rv)() const;
        *((void**)&rv) = dlsym("?getUserId@Player@@UEBAIXZ");
        return (this->*rv)();
    }
    inline void displayChatMessage(std::string const& a0, std::string const& a1){
        void (Player::*rv)(std::string const&, std::string const&);
        *((void**)&rv) = dlsym("?displayChatMessage@Player@@UEAAXAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z");
        return (this->*rv)(std::forward<std::string const&>(a0), std::forward<std::string const&>(a1));
    }
    inline void openChalkboard(class ChalkboardBlockActor& a0, bool a1){
        void (Player::*rv)(class ChalkboardBlockActor&, bool);
        *((void**)&rv) = dlsym("?openChalkboard@Player@@UEAAXAEAVChalkboardBlockActor@@_N@Z");
        return (this->*rv)(std::forward<class ChalkboardBlockActor&>(a0), std::forward<bool>(a1));
    }
    inline void openBook(int a0, bool a1, int a2, class BlockActor* a3){
        void (Player::*rv)(int, bool, int, class BlockActor*);
        *((void**)&rv) = dlsym("?openBook@Player@@UEAAXH_NHPEAVBlockActor@@@Z");
        return (this->*rv)(std::forward<int>(a0), std::forward<bool>(a1), std::forward<int>(a2), std::forward<class BlockActor*>(a3));
    }
    inline void displayClientMessage(std::string const& a0){
        void (Player::*rv)(std::string const&);
        *((void**)&rv) = dlsym("?displayClientMessage@Player@@UEAAXAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z");
        return (this->*rv)(std::forward<std::string const&>(a0));
    }
    inline void openSign(class BlockPos const& a0){
        void (Player::*rv)(class BlockPos const&);
        *((void**)&rv) = dlsym("?openSign@Player@@UEAAXAEBVBlockPos@@@Z");
        return (this->*rv)(std::forward<class BlockPos const&>(a0));
    }
    inline void _serverInitItemStackIds(){
        void (Player::*rv)();
        *((void**)&rv) = dlsym("?_serverInitItemStackIds@Player@@MEAAXXZ");
        return (this->*rv)();
    }
    inline void playEmote(std::string const& a0){
        void (Player::*rv)(std::string const&);
        *((void**)&rv) = dlsym("?playEmote@Player@@UEAAXAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z");
        return (this->*rv)(std::forward<std::string const&>(a0));
    }
    inline void openPortfolio(){
        void (Player::*rv)();
        *((void**)&rv) = dlsym("?openPortfolio@Player@@UEAAXXZ");
        return (this->*rv)();
    }
    inline void resetRot(){
        void (Player::*rv)();
        *((void**)&rv) = dlsym("?resetRot@Player@@UEAAXXZ");
        return (this->*rv)();
    }
    inline void stopLoading(){
        void (Player::*rv)();
        *((void**)&rv) = dlsym("?stopLoading@Player@@UEAAXXZ");
        return (this->*rv)();
    }
    inline bool isPlayer() const{
        bool (Player::*rv)() const;
        *((void**)&rv) = dlsym("?isPlayer@Player@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline bool isCreativeModeAllowed(){
        bool (Player::*rv)();
        *((void**)&rv) = dlsym("?isCreativeModeAllowed@Player@@UEAA_NXZ");
        return (this->*rv)();
    }
    inline bool isAutoJumpEnabled() const{
        bool (Player::*rv)() const;
        *((void**)&rv) = dlsym("?isAutoJumpEnabled@Player@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline bool isShootable(){
        bool (Player::*rv)();
        *((void**)&rv) = dlsym("?isShootable@Player@@UEAA_NXZ");
        return (this->*rv)();
    }
    inline bool getAlwaysShowNameTag() const{
        bool (Player::*rv)() const;
        *((void**)&rv) = dlsym("?getAlwaysShowNameTag@Player@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline void openNpcInteractScreen(class std::shared_ptr<struct INpcDialogueData> a0){
        void (Player::*rv)(class std::shared_ptr<struct INpcDialogueData>);
        *((void**)&rv) = dlsym("?openNpcInteractScreen@Player@@UEAAXV?$shared_ptr@UINpcDialogueData@@@std@@@Z");
        return (this->*rv)(std::forward<class std::shared_ptr<struct INpcDialogueData>>(a0));
    }
    inline  ~Player(){
         (Player::*rv)();
        *((void**)&rv) = dlsym("??1Player@@UEAA@XZ");
        return (this->*rv)();
    }
    */
    MCAPI Player(class Level&, class PacketSender&, enum GameType, class NetworkIdentifier const&, unsigned char, class mce::UUID, std::string const&, std::unique_ptr<class Certificate>, class EntityContext&, std::string const&, std::string const&);
    MCAPI void broadcastPlayerSpawnedMobEvent(enum ActorType, enum MobSpawnMethod);
    MCAPI bool canBeSeenOnMap() const;
    MCAPI bool canDestroy(class Block const&) const;
    MCAPI bool canUseAbility(enum AbilitiesIndex) const;
    MCAPI bool canUseOperatorBlocks() const;
    MCAPI void causeFoodExhaustion(float);
    MCAPI void clearRespawnPosition();
    MCAPI void eat(class ItemStack const&);
    MCAPI void eat(int, float);
    MCAPI bool equippedArmorItemCanBeMoved(class ItemStack const&) const;
    MCAPI void fireDimensionChangedEvent(class AutomaticID<class Dimension, int>);
    MCAPI bool forceAllowEating() const;
    MCAPI class Agent* getAgent() const;
    MCAPI struct ActorUniqueID getAgentID() const;
    MCAPI class Agent* getAgentIfAllowed(bool, struct ActorUniqueID) const;
    MCAPI class BlockPos const& getBedPosition() const;
    MCAPI __int64 getBlockedUsingDamagedShieldTimeStamp() const;
    MCAPI __int64 getBlockedUsingShieldTimeStamp() const;
    MCAPI __int64 getBlockingStartTimeStamp() const;
    MCAPI class Vec3 getCapePos(float);
    MCAPI class std::weak_ptr<class IContainerManager> getContainerManager();
    MCAPI class ItemStack const& getCurrentActiveShield() const;
    MCAPI float getDestroyProgress(class Block const&) const;
    MCAPI float getDestroySpeed(class Block const&) const;
    MCAPI int getDirection() const;
    MCAPI int getEnchantmentSeed() const;
    MCAPI class AutomaticID<class Dimension, int> getExpectedSpawnDimensionId() const;
    MCAPI class BlockPos const& getExpectedSpawnPosition() const;
    MCAPI std::string getInteractText() const;
    MCAPI class Container& getInventory();
    MCAPI class ItemStack const& getItemInUse() const;
    MCAPI std::string getItemInteractText(class Item const&) const;
    MCAPI class ItemStackNetManagerBase* getItemStackNetManager();
    MCAPI class ItemStackNetManagerBase const* getItemStackNetManager() const;
    MCAPI float getLuck();
    MCAPI int getMapIndex();
    MCAPI void getNewEnchantmentSeed();
    MCAPI class AABB getPickupArea() const;
    MCAPI enum BuildPlatform getPlatform() const;
    MCAPI std::string const& getPlatformOnlineId() const;
    MCAPI enum GameType getPlayerGameType() const;
    MCAPI int getPlayerIndex() const;
    MCAPI int getPlayerLevel() const;
    MCAPI enum PlayerPermissionLevel getPlayerPermissionLevel() const;
    MCAPI std::string const& getPlayerSessionId() const;
    MCAPI class ItemStack const& getPlayerUIItem(enum PlayerUISlot);
    MCAPI class BlockPos const& getRespawnAnchorPosition() const;
    MCAPI class ItemStack const& getSelectedItem() const;
    MCAPI int getSelectedItemSlot() const;
    MCAPI class SerializedSkin& getSkin();
    MCAPI class SerializedSkin const& getSkin() const;
    MCAPI float getSleepRotation() const;
    MCAPI class AutomaticID<class Dimension, int> getSpawnDimension() const;
    MCAPI class BlockPos const& getSpawnPosition() const;
    MCAPI class PlayerInventory& getSupplies();
    MCAPI class PlayerInventory const& getSupplies() const;
    MCAPI std::vector<struct ActorUniqueID> const& getTrackedBosses();
    MCAPI enum GameType getUnmappedPlayerGameType() const;
    MCAPI bool getUsedPotion();
    MCAPI int getXpNeededForNextLevel() const;
    MCAPI bool hasBedPosition() const;
    MCAPI bool hasOpenContainer() const;
    MCAPI bool hasOpenContainerOfContainerType(enum ContainerType) const;
    MCAPI bool hasOwnedChunkSource() const;
    MCAPI bool hasResource(class ItemDescriptor const&);
    MCAPI bool hasRespawnAnchorPosition() const;
    MCAPI bool hasRespawnPosition() const;
    MCAPI bool interact(class Actor&, class Vec3 const&);
    MCAPI bool isBouncing() const;
    MCAPI bool isForcedRespawn() const;
    MCAPI bool isHiddenFrom(class Mob&) const;
    MCAPI bool isHungry() const;
    MCAPI bool isHurt();
    MCAPI bool isInCreativeMode() const;
    MCAPI bool isInRaid() const;
    MCAPI bool isRespawningFromTheEnd() const;
    MCAPI bool isSleepingLongEnough() const;
    MCAPI bool isSpawned() const;
    MCAPI bool isSurvival() const;
    MCAPI bool isUsingItem() const;
    MCAPI void moveSpawnView(class Vec3 const&, class AutomaticID<class Dimension, int>);
    MCAPI void recheckSpawnPosition();
    MCAPI void releaseUsingItem();
    MCAPI void resetPlayerLevel();
    MCAPI void resetToDefaultGameMode();
    MCAPI void setAgent(class Agent*);
    MCAPI void setAllPlayersSleeping();
    MCAPI void setBedRespawnPosition(class BlockPos const&);
    MCAPI void setBlockRespawnUntilClientMessage(bool);
    MCAPI void setChunkRadius(unsigned int);
    MCAPI void setContainerManager(class std::shared_ptr<class IContainerManager>);
    MCAPI void setCursorSelectedItem(class ItemStack const&);
    MCAPI void setCursorSelectedItemGroup(class ItemGroup const&);
    MCAPI void setEnchantmentSeed(int);
    MCAPI void setHasSeenCredits(bool);
    MCAPI void setMapIndex(int);
    MCAPI void setPlatformOnlineId(std::string const&);
    MCAPI void setPlayerIndex(int);
    MCAPI void setPlayerUIItem(enum PlayerUISlot, class ItemStack const&);
    MCAPI void setRespawnPosition(class BlockPos const&, class AutomaticID<class Dimension, int>);
    MCAPI void setRespawnPositionCandidate();
    MCAPI void setRespawnReady(class Vec3 const&);
    MCAPI void setSelectedItem(class ItemStack const&);
    MCAPI class ItemStack const& setSelectedSlot(int);
    MCAPI void setSpawnBlockRespawnPosition(class BlockPos const&, class AutomaticID<class Dimension, int>);
    MCAPI void setUsedPotion(bool);
    MCAPI bool shouldShowCredits() const;
    MCAPI void spawnExperienceOrb(class Vec3 const&, int);
    MCAPI void startCooldown(class HashedString const&, int, bool);
    MCAPI void startGliding();
    MCAPI void startUsingItem(class ItemStack const&, int);
    MCAPI void stopGliding();
    MCAPI void stopUsingItem();
    MCAPI bool take(class Actor&, int, int);
    MCAPI void updateInventoryTransactions();
    MCAPI void updateSkin(class SerializedSkin const&, int);
    MCAPI void updateSpawnChunkView();
    MCAPI void updateTrackedBosses();
    MCAPI void useSelectedItem(enum ItemUseMethod, bool);
    MCAPI static float const DEFAULT_BB_HEIGHT;
    MCAPI static float const DEFAULT_BB_WIDTH;
    MCAPI static float const DEFAULT_FLY_SPEED;
    MCAPI static float const DEFAULT_PLAYER_HEIGHT_OFFSET;
    MCAPI static float const DEFAULT_WALK_SPEED;
    MCAPI static float const DISTANCE_TO_TRANSFORM_EVENT;
    MCAPI static float const DISTANCE_TO_TRAVELLED_EVENT;
    MCAPI static class Attribute const EXHAUSTION;
    MCAPI static class Attribute const EXPERIENCE;
    MCAPI static int const GLIDE_STOP_DELAY;
    MCAPI static class Attribute const HUNGER;
    MCAPI static int const ITEM_USE_INTERVAL_DURATION;
    MCAPI static class Attribute const LEVEL;
    MCAPI static int const MAX_ITEM_USE_DURATION;
    MCAPI static float const PLAYER_ALIVE_HEIGHT;
    MCAPI static float const PLAYER_ALIVE_WIDTH;
    MCAPI static float const PLAYER_DEAD_HEIGHT;
    MCAPI static float const PLAYER_DEAD_WIDTH;
    MCAPI static float const PLAYER_DOWN_SWIM_SPEED;
    MCAPI static float const PLAYER_GLIDING_CAMERA_OFFSET;
    MCAPI static float const PLAYER_SLEEPING_CAMERA_OFFSET;
    MCAPI static float const PLAYER_SLEEPING_HEIGHT;
    MCAPI static float const PLAYER_SLEEPING_WIDTH;
    MCAPI static float const PLAYER_SNEAK_OFFSET;
    MCAPI static float const PLAYER_SWIMMING_CAMERA_OFFSET;
    MCAPI static float const PLAYER_SWIM_BREACH_ANGLE;
    MCAPI static float const PLAYER_SWIM_ENTER_THRESHOLD;
    MCAPI static float const PLAYER_SWIM_FLY_MULTI;
    MCAPI static float const PLAYER_UP_SWIM_SPEED;
    MCAPI static class Attribute const SATURATION;
    MCAPI static unsigned int const SPAWN_CHUNK_LARGE_JUMP;
    MCAPI static unsigned int const SPAWN_CHUNK_RADIUS;
    MCAPI static void _aiStep(struct IPlayerMovementProxy&);
    MCAPI static void _jumpFromGround(struct IPlayerMovementProxy&);
    MCAPI static void _travel(struct IPlayerMovementProxy&, float, float, float);
    MCAPI static bool canJump(struct IPlayerMovementProxy&);
    MCAPI static bool checkAndFixSpawnPosition(class Vec3&, std::vector<class gsl::not_null<class BlockSource* >>, class AABB, bool, bool, bool, bool, bool, bool, short);
    MCAPI static bool checkNeedAutoJump(struct IPlayerMovementProxy*, float, float);
    MCAPI static void goDownInWater(struct IActorMovementProxy&);
    MCAPI static void handleJumpEffects(struct IPlayerMovementProxy&);
    MCAPI static class Player* tryGetFromComponent(class FlagComponent<struct PlayerComponentFlag> const&, class ActorOwnerComponent&, bool);
    MCAPI static class Player* tryGetFromEntity(class EntityContext&, bool);
    MCAPI static class Player* tryGetFromEntity(class StackRefResultT<struct EntityRefTraits>, bool);

protected:
    MCAPI bool _checkAndFixSpawnPosition(class Vec3&, std::vector<class gsl::not_null<class BlockSource* >>, bool, bool, bool, bool, bool) const;
    MCAPI void _chooseSpawnArea();
    MCAPI bool _chooseSpawnPositionWithinArea();
    MCAPI void _registerPlayerAttributes();
    MCAPI void _updateInteraction();
    MCAPI bool _validateSpawnPositionAvailability(class Vec3 const&, class BlockSource*, class Vec3 const*) const;
    MCAPI bool checkBed(class BlockSource*, class Vec3 const*);
    MCAPI bool checkSpawnBlock(class BlockSource const&) const;

private:
    MCAPI void _addLevels(int);
    MCAPI bool _blockUsingShield(class ActorDamageSource const&, float);
    MCAPI void _ensureSafeSpawnPosition(class Vec3&);
    MCAPI bool _findFallbackSpawnPosition(class Vec3&, std::vector<class gsl::not_null<class BlockSource* >>, unsigned int);
    MCAPI void _handleCarriedItemInteractText();
    MCAPI bool _isChunkSourceLoaded(class Vec3 const&, class BlockSource const&) const;
    MCAPI void _registerElytraLoopSound();
    MCAPI void _sendShieldUpdatePacket(class ShieldItem const&, class ItemStack const&, class ItemStack const&, enum ContainerID, int);

};