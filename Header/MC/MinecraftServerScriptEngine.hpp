// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

class MinecraftServerScriptEngine {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA

#ifndef DISABLE_CONSTRUCTOR_PREVENTION_MINECRAFTSERVERSCRIPTENGINE
public:
    class MinecraftServerScriptEngine& operator=(class MinecraftServerScriptEngine const&) = delete;
    MinecraftServerScriptEngine(class MinecraftServerScriptEngine const&) = delete;
    MinecraftServerScriptEngine() = delete;
#endif

public:
    /*
    inline void _handleError(class ScriptApi::ScriptReportItem const& a0){
        void (MinecraftServerScriptEngine::*rv)(class ScriptApi::ScriptReportItem const&);
        *((void**)&rv) = dlsym("?_handleError@MinecraftServerScriptEngine@@EEAAXAEBVScriptReportItem@ScriptApi@@@Z");
        return (this->*rv)(std::forward<class ScriptApi::ScriptReportItem const&>(a0));
    }
    inline void _handleWarning(class ScriptApi::ScriptReportItem const& a0){
        void (MinecraftServerScriptEngine::*rv)(class ScriptApi::ScriptReportItem const&);
        *((void**)&rv) = dlsym("?_handleWarning@MinecraftServerScriptEngine@@EEAAXAEBVScriptReportItem@ScriptApi@@@Z");
        return (this->*rv)(std::forward<class ScriptApi::ScriptReportItem const&>(a0));
    }
    inline bool _helpRegisterSystemCallbacks(class ScriptApi::ScriptObjectHandle const& a0){
        bool (MinecraftServerScriptEngine::*rv)(class ScriptApi::ScriptObjectHandle const&);
        *((void**)&rv) = dlsym("?_helpRegisterSystemCallbacks@MinecraftServerScriptEngine@@EEAA_NAEBVScriptObjectHandle@ScriptApi@@@Z");
        return (this->*rv)(std::forward<class ScriptApi::ScriptObjectHandle const&>(a0));
    }
    inline bool _registerSystemObjects(class ScriptApi::ScriptObjectHandle const& a0){
        bool (MinecraftServerScriptEngine::*rv)(class ScriptApi::ScriptObjectHandle const&);
        *((void**)&rv) = dlsym("?_registerSystemObjects@MinecraftServerScriptEngine@@EEAA_NAEBVScriptObjectHandle@ScriptApi@@@Z");
        return (this->*rv)(std::forward<class ScriptApi::ScriptObjectHandle const&>(a0));
    }
    inline bool executeCommand(struct ScriptCommand const& a0){
        bool (MinecraftServerScriptEngine::*rv)(struct ScriptCommand const&);
        *((void**)&rv) = dlsym("?executeCommand@MinecraftServerScriptEngine@@UEAA_NAEBUScriptCommand@@@Z");
        return (this->*rv)(std::forward<struct ScriptCommand const&>(a0));
    }
    inline enum EventResult onEvent(struct ServerInstanceLeaveGameDoneEvent const& a0){
        enum EventResult (MinecraftServerScriptEngine::*rv)(struct ServerInstanceLeaveGameDoneEvent const&);
        *((void**)&rv) = dlsym("?onEvent@MinecraftServerScriptEngine@@UEAA?AW4EventResult@@AEBUServerInstanceLeaveGameDoneEvent@@@Z");
        return (this->*rv)(std::forward<struct ServerInstanceLeaveGameDoneEvent const&>(a0));
    }
    inline void onExecuteCommandCalled(class ScriptApi::ScriptVersionInfo const& a0, struct ScriptCommand&& a1){
        void (MinecraftServerScriptEngine::*rv)(class ScriptApi::ScriptVersionInfo const&, struct ScriptCommand&&);
        *((void**)&rv) = dlsym("?onExecuteCommandCalled@MinecraftServerScriptEngine@@UEAAXAEBVScriptVersionInfo@ScriptApi@@$$QEAUScriptCommand@@@Z");
        return (this->*rv)(std::forward<class ScriptApi::ScriptVersionInfo const&>(a0), std::forward<struct ScriptCommand&&>(a1));
    }
    inline enum EventResult onLevelTick(){
        enum EventResult (MinecraftServerScriptEngine::*rv)();
        *((void**)&rv) = dlsym("?onLevelTick@MinecraftServerScriptEngine@@UEAA?AW4EventResult@@XZ");
        return (this->*rv)();
    }
    inline enum EventResult onServerLevelInitialized(class ServerInstance& a0, class Level& a1){
        enum EventResult (MinecraftServerScriptEngine::*rv)(class ServerInstance&, class Level&);
        *((void**)&rv) = dlsym("?onServerLevelInitialized@MinecraftServerScriptEngine@@UEAA?AW4EventResult@@AEAVServerInstance@@AEAVLevel@@@Z");
        return (this->*rv)(std::forward<class ServerInstance&>(a0), std::forward<class Level&>(a1));
    }
    inline enum EventResult onServerThreadStarted(class ServerInstance& a0){
        enum EventResult (MinecraftServerScriptEngine::*rv)(class ServerInstance&);
        *((void**)&rv) = dlsym("?onServerThreadStarted@MinecraftServerScriptEngine@@UEAA?AW4EventResult@@AEAVServerInstance@@@Z");
        return (this->*rv)(std::forward<class ServerInstance&>(a0));
    }
    inline enum EventResult onServerUpdateEnd(class ServerInstance& a0){
        enum EventResult (MinecraftServerScriptEngine::*rv)(class ServerInstance&);
        *((void**)&rv) = dlsym("?onServerUpdateEnd@MinecraftServerScriptEngine@@UEAA?AW4EventResult@@AEAVServerInstance@@@Z");
        return (this->*rv)(std::forward<class ServerInstance&>(a0));
    }
    inline enum EventResult onServerUpdateStart(class ServerInstance& a0){
        enum EventResult (MinecraftServerScriptEngine::*rv)(class ServerInstance&);
        *((void**)&rv) = dlsym("?onServerUpdateStart@MinecraftServerScriptEngine@@UEAA?AW4EventResult@@AEAVServerInstance@@@Z");
        return (this->*rv)(std::forward<class ServerInstance&>(a0));
    }
    inline bool setupInterface(){
        bool (MinecraftServerScriptEngine::*rv)();
        *((void**)&rv) = dlsym("?setupInterface@MinecraftServerScriptEngine@@UEAA_NXZ");
        return (this->*rv)();
    }
    */
    MCAPI MinecraftServerScriptEngine(class ServerInstance&);

protected:

private:
    MCAPI void _queueResourcePackScripts(class ResourcePackManager&);
    MCAPI void _registerEventListeners(class Level&, class NetworkHandler&);
    MCAPI void _setupContext(class Minecraft&, class PacketSender&, class entt::basic_registry<enum entt::entity>&);
    MCAPI void _unregisterEventListeners(class Level*, class NetworkHandler&);

};