// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

class HumanoidMonster {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA

#ifndef DISABLE_CONSTRUCTOR_PREVENTION_HUMANOIDMONSTER
public:
    class HumanoidMonster& operator=(class HumanoidMonster const&) = delete;
    HumanoidMonster(class HumanoidMonster const&) = delete;
    HumanoidMonster() = delete;
#endif

public:
    /*
    inline  ~HumanoidMonster(){
         (HumanoidMonster::*rv)();
        *((void**)&rv) = dlsym("??1HumanoidMonster@@UEAA@XZ");
        return (this->*rv)();
    }
    inline void addAdditionalSaveData(class CompoundTag& a0){
        void (HumanoidMonster::*rv)(class CompoundTag&);
        *((void**)&rv) = dlsym("?addAdditionalSaveData@HumanoidMonster@@MEAAXAEAVCompoundTag@@@Z");
        return (this->*rv)(std::forward<class CompoundTag&>(a0));
    }
    inline bool doHurtTarget(class Actor* a0, enum ActorDamageCause const& a1){
        bool (HumanoidMonster::*rv)(class Actor*, enum ActorDamageCause const&);
        *((void**)&rv) = dlsym("?doHurtTarget@HumanoidMonster@@UEAA_NPEAVActor@@AEBW4ActorDamageCause@@@Z");
        return (this->*rv)(std::forward<class Actor*>(a0), std::forward<enum ActorDamageCause const&>(a1));
    }
    inline int getItemUseDuration() const{
        int (HumanoidMonster::*rv)() const;
        *((void**)&rv) = dlsym("?getItemUseDuration@HumanoidMonster@@UEBAHXZ");
        return (this->*rv)();
    }
    inline void normalTick(){
        void (HumanoidMonster::*rv)();
        *((void**)&rv) = dlsym("?normalTick@HumanoidMonster@@UEAAXXZ");
        return (this->*rv)();
    }
    inline void readAdditionalSaveData(class CompoundTag const& a0, class DataLoadHelper& a1){
        void (HumanoidMonster::*rv)(class CompoundTag const&, class DataLoadHelper&);
        *((void**)&rv) = dlsym("?readAdditionalSaveData@HumanoidMonster@@MEAAXAEBVCompoundTag@@AEAVDataLoadHelper@@@Z");
        return (this->*rv)(std::forward<class CompoundTag const&>(a0), std::forward<class DataLoadHelper&>(a1));
    }
    */

protected:

private:
    MCAPI static float const MAX_ENCHANTED_ARMOR_CHANCE;
    MCAPI static float const MAX_ENCHANTED_WEAPON_CHANCE;
    MCAPI static float const MAX_PICKUP_LOOT_CHANCE;
    MCAPI static float const MAX_WEARING_ARMOR_CHANCE;

};