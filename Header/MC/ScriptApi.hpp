// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

namespace ScriptApi {

#define AFTER_EXTRA
// Add Member There
class ScriptVersionInfo {
public:
    ScriptVersionInfo() = delete;
    ScriptVersionInfo(ScriptVersionInfo const&) = delete;
    ScriptVersionInfo(ScriptVersionInfo const&&) = delete;
};
class ScriptObjectHandle {
public:
    ScriptObjectHandle() = delete;
    ScriptObjectHandle(ScriptObjectHandle const&) = delete;
    ScriptObjectHandle(ScriptObjectHandle const&&) = delete;
};
class ScriptReportItem {
public:
    ScriptReportItem() = delete;
    ScriptReportItem(ScriptReportItem const&) = delete;
    ScriptReportItem(ScriptReportItem const&&) = delete;
};
class ScriptReport {
public:
    ScriptReport() = delete;
    ScriptReport(ScriptReport const&) = delete;
    ScriptReport(ScriptReport const&&) = delete;
};
class ScriptCallbackInterface {
public:
    ScriptCallbackInterface() = delete;
    ScriptCallbackInterface(ScriptCallbackInterface const&) = delete;
    ScriptCallbackInterface(ScriptCallbackInterface const&&) = delete;
};

#undef AFTER_EXTRA
    MCAPI void* AddFilterToQueryChakraCallback(void*, bool, void* *, unsigned short, void*);
    MCAPI void* ApplyComponentChangesChakraCallback(void*, bool, void* *, unsigned short, void*);
    MCAPI void* BroadcastEventChakraCallback(void*, bool, void* *, unsigned short, void*);
    MCAPI void* CreateComponentChakraCallback(void*, bool, void* *, unsigned short, void*);
    MCAPI void* CreateEntityChakraCallback(void*, bool, void* *, unsigned short, void*);
    MCAPI void* CreateEventDataChakraCallback(void*, bool, void* *, unsigned short, void*);
    MCAPI enum _JsErrorCode DefineChakraCallback(void*, std::string const&, void* (* )(void* , bool, void* * , unsigned short, void* ), void*, class ScriptApi::ScriptReport&);
    MCAPI void* DestroyComponentChakraCallback(void*, bool, void* *, unsigned short, void*);
    MCAPI void* DestroyEntityChakraCallback(void*, bool, void* *, unsigned short, void*);
    MCAPI void* ErrorChakraCallback(void*, bool, void* *, unsigned short, void*);
    MCAPI void* ExecuteCommandChakraCallback(void*, bool, void* *, unsigned short, void*);
    MCAPI void* GetBlockChakraCallback(void*, bool, void* *, unsigned short, void*);
    MCAPI void* GetBlocksChakraCallback(void*, bool, void* *, unsigned short, void*);
    MCAPI void* GetComponentChakraCallback(void*, bool, void* *, unsigned short, void*);
    MCAPI void* GetEntitiesFromQueryChakraCallback(void*, bool, void* *, unsigned short, void*);
    MCAPI void* HasComponentChakraCallback(void*, bool, void* *, unsigned short, void*);
    MCAPI void* InfoChakraCallback(void*, bool, void* *, unsigned short, void*);
    MCAPI void* IsValidEntityChakraCallback(void*, bool, void* *, unsigned short, void*);
    MCAPI enum _JsErrorCode JsCreatePropertyIdHelper(std::string const&, void* *);
    MCAPI enum _JsErrorCode JsGetStringHelper(void*, std::string&);
    MCAPI void* ListenForEventChakraCallback(void*, bool, void* *, unsigned short, void*);
    MCAPI void* LogChakraCallback(void*, bool, void* *, unsigned short, void*);
    MCAPI void* OnChakraEngineCall(void*, bool, void* *, unsigned short, void*, class std::function<void (class ScriptApi::ScriptCallbackInterface& , std::vector<class ScriptApi::ScriptObjectHandle> const& , class ScriptApi::ScriptObjectHandle& )>);
    MCAPI void* RegisterComponentChakraCallback(void*, bool, void* *, unsigned short, void*);
    MCAPI void* RegisterEventDataChakraCallback(void*, bool, void* *, unsigned short, void*);
    MCAPI void* RegisterQueryChakraCallback(void*, bool, void* *, unsigned short, void*);
    MCAPI void* RegisterSystemChakraCallback(void*, bool, void* *, unsigned short, void*);
    MCAPI void* WarningChakraCallback(void*, bool, void* *, unsigned short, void*);

};